[{"title": "D00M4ACE подкаст 1 Падение стоимости акций Tencent на 46 миллиардов долларов и новый закон об онлайн-играх в Китае", "body": "D00M4ACE подкаст 1 Падение стоимости акций Tencent на 46 миллиардов долларов и новый закон об онлайн-играх в Китае Блог Проекты Тэги Заметки Search D00M4ACE подкаст 1 Падение стоимости акций Tencent на 46 миллиардов долларов и новый закон об онлайн-играх в Китае #30 вторник, 26 декабря 2023 г. 22 минут(ы) 2129 слов #Podcast #GameDev #Tencent #NetEase В подкасте рассматривается предложенный Китаем новый закон об онлайн-играх, который направлен на ограничение различных аспектов, таких как ежедневный вход в систему, первые покупки и продажа услуг \"gotcha\" лицам моложе 18 лет. Хотя это предложение еще не реализовано, оно привело к значительному падению стоимости акций крупнейших игровых компаний, таких как Tencent и NetEase. В подкасте также обсуждаются более широкие последствия такого регулирования, в частности, такие вопросы, как азартные игры в играх, влияние на игровую индустрию, потенциальное воздействие на дизайн игр и вовлеченность игроков. Транскрипция подкаста: Андрей: Привет, Алина! Ты слышала о новом законопроекте в Китае, ограничивающем онлайн-игры? Это повлияло на акции Tencent и NetEase. Алина: Да, Андрей, интересный момент. Это связано с запретом на ежедневный вход в игру, покупки и продажу \"гача\" услуг несовершеннолетним. Андрей: Интересно, как это повлияет на саму индустрию. Эти ограничения могут сильно изменить подход к разработке игр. Алина: Согласна. Особенно важно обсуждение влияния азартных игр на детей и подростков. Похоже, что законопроект нацелен на борьбу с этим. Андрей: Точно, Алина. Это может быть началом больших изменений в индустрии онлайн-игр, особенно в отношении монетизации и вовлечения игроков. Алина: Интересно будет наблюдать за развитием ситуации и реакцией игровых компаний на эти изменения. Андрей: Кроме того, мы не можем игнорировать финансовые потери компаний. Падение стоимости акций Tencent на 46 миллиардов долларов — это огромный удар. Алина: Да, и это может сказаться не только на крупных игроках, но и на всей экосистеме игровой индустрии. Разработчики игр должны будут адаптироваться к новым реалиям. Андрей: Интересно, как это скажется на креативности и инновациях в играх. Возможно, увидим сдвиг в сторону более социально ответственных игр. Алина: Точно, Андрей. Это может быть вызовом, но также и возможностью для индустрии переосмыслить свои приоритеты и ценности. Андрей: Это изменение также поднимает вопросы о балансе между регулированием и творческой свободой в игровой индустрии. Алина: Согласна. Как создатели игр будут справляться с новыми ограничениями, при этом сохраняя инновационность и увлекательность игрового процесса? Андрей: Возможно, это подтолкнет индустрию к разработке новых стратегий монетизации, которые будут более ориентированы на игрока. Алина: Да, и это может привести к большему вниманию к социально-ответственным практикам в индустрии. Андрей: И еще, Алина, это может сигнализировать о начале глобальных изменений в отношении регулирования игровой индустрии в других странах. Алина: Да, важно следить за этим трендом. Подобные изменения в Китае могут стать примером для других регуляторов. Андрей: В итоге, это напоминает нам о необходимости гибкости и приспособляемости в игровой индустрии. Алина: Именно так, Андрей. Это время для инноваций и новых подходов в создании игр. Андрей: Однако, стоит помнить, что такие меры в Китае также могут вызвать опасения по поводу цензуры и ограничения свободы выражения. Алина: Да, это делает еще более актуальным вопрос о том, как балансировать между защитой молодежи и поддержанием творческой свободы. Андрей: И это может стать тестом для игровой индустрии, чтобы найти гармоничный путь в этих новых условиях. Алина: В конце концов, эти изменения могут привести к более зрелой и ответственной игровой индустрии. Андрей: Ну и напоследок, Алина, давайте подумаем, как эти изменения могут повлиять на международный рынок игр. Алина: Да, Андрей. Рынки вне Китая могут испытать влияние этих мер, особенно в плане экспорта игр и международного сотрудничества. Андрей: Вероятно, компании будут искать новые рынки и стратегии, чтобы компенсировать потери от ограничений в Китае. Алина: И это может стать стимулом для инноваций и развития новых жанров и форматов игр. Андрей: И последнее, что стоит обсудить – это реакция игрового сообщества на эти изменения. Алина: Да, реакция игроков и разработчиков будет ключевым фактором. Они могут адаптировать свое поведение и ожидания к новым реалиям. Андрей: Верно, Алина. Это может стать точкой перелома, где игровое сообщество будет активнее участвовать в формировании будущего игровой индустрии. Алина: Такие моменты показывают, насколько важным является голос игрового сообщества и его влияние на индустрию в целом. Андрей: Возвращаясь к теме ограничений, интересно обсудить, как это повлияет на игровые инновации. Столкнувшись с ограничениями, индустрия может искать новые пути для творчества. Алина: Согласна, Андрей. Ограничения иногда порождают новаторство. Мы можем увидеть совершенно новые жанры или подходы к игровому дизайну. Андрей: И это может повысить стандарты в отрасли, особенно в плане социальной ответственности и вовлечения игроков. Алина: А что насчет мирового рынка? Как мировые рынки реагируют на такие изменения в Китае? Андрей: Хороший вопрос. Это может привести к глобальной реорганизации игровой индустрии, где компании будут стремиться разрабатывать игры, которые удовлетворяют разные культурные и регулятивные стандарты. Алина: Точно, Андрей. Это время перемен, и оно может оказаться очень захватывающим для игровой индустрии. Андрей: Алина, давайте обсудим, как новые регуляции в Китае могут повлиять на условно бесплатные мобильные игры. Алина: О, это важный вопрос. Учитывая, что многие из этих игр зарабатывают на микротранзакциях, ограничения могут серьёзно изменить их бизнес-модели. Андрей: Да, особенно с запретом на \"гача\" механизмы и ограничениями на покупки для несовершеннолетних. Это может сделать эти игры менее прибыльными. Алина: Также возможно, что разработчики начнут искать новые способы монетизации, которые будут более совместимы с новыми законами. Андрей: Верно. И это может привести к более здоровым и устойчивым способам монетизации, что, в конечном счете, может быть хорошо как для игроков, так и для индустрии. Алина: Кроме того, это может повлиять на общую культуру мобильных игр. Если микротранзакции и \"гача\" будут ограничены, разработчики могут сосредоточиться на создании более увлекательного и ценного игрового опыта. Андрей: Согласен, Алина. Это может способствовать развитию более качественных игр, где успех определяется не количеством микротранзакций, а глубиной и уникальностью игрового процесса. Алина: Также это может привести к усилению тренда на создание игр с меньшим фокусом на монетизацию и большим — на вовлечение и удовлетворение игроков. Андрей: Однозначно. Мы можем увидеть сдвиг в индустрии, где приоритетом станет создание ценности и удовольствия для игроков, а не просто заработок на микротранзакциях. Алина: Ещё один аспект, который стоит упомянуть, это влияние на маленькие студии разработчиков. Им может быть сложнее адаптироваться к новым правилам. Андрей: Действительно, Алина. Малые студии, которые часто зависят от микротранзакций, могут нуждаться в поиске новых путей монетизации и продвижения своих игр. Алина: Возможно, это также создаст больше возможностей для сотрудничества и партнёрства между разработчиками для совместного преодоления этих вызовов. Андрей: Совершенно верно. Это может привести к укреплению игрового сообщества и содействию более тесному сотрудничеству в индустрии. Алина: Наконец, давайте подумаем о том, как эти новые регуляции повлияют на глобальное восприятие мобильных игр. Андрей: Да, это может изменить общее отношение к мобильным играм, особенно в отношении их восприятия как средства развлечения или как платформ для микротранзакций. Алина: Точно. Это может быть шансом для мобильных игр стать более уважаемым и ценным сегментом в общей культуре игр. Андрей: Согласен. Эти изменения могут способствовать переосмыслению игровой индустрии в целом, включая то, как мы оцениваем и воспринимаем игры. Андрей: Последний вопрос, который стоит рассмотреть: как теперь можно зарабатывать на мобильных играх в свете этих регуляций? Алина: Хороший вопрос, Андрей. Одним из путей может быть разработка игр с более глубоким и увлекательным контентом, что повысит вероятность покупки полной версии игры. Андрей: Также можно рассмотреть модели подписки, где игроки платят за доступ к регулярно обновляемому контенту или эксклюзивным функциям. Алина: И не забываем о продаже мерча и виртуальных товаров, которые могут быть альтернативой микротранзакциям и создавать дополнительную ценность для игроков. Андрей: Алина, давайте обсудим, с чем связаны эти новые запреты и ограничения на мобильные игры в Китае. Алина: Эти меры, кажется, связаны с беспокойством правительства о влиянии азартных игр и чрезмерного использования мобильных игр на молодежь. Андрей: Верно. Также они направлены на борьбу с зависимостью от игр и потенциальными негативными социальными и психологическими последствиями. Алина: Это часть более широкой тенденции регулирования цифрового контента и технологий, которая наблюдается не только в Китае, но и в других странах. Андрей: А как обстоят дела с регулированием мобильных игр в других регионах, например, в Европе, Америке и России? Алина: В Европе и США существуют определенные регуляции, особенно в отношении защиты данных и цифровой безопасности. Также обсуждается вопрос о влиянии микротранзакций и азартных игр. Андрей: В России также принимаются меры по регулированию цифрового контента, но они могут отличаться от китайских подходов, сосредотачиваясь больше на контенте и безопасности. Алина: Интересно, что каждый регион имеет свой подход, отражающий культурные и социальные особенности. Андрей: А как, по-твоему, сами игроки относятся к этим изменениям в регулировании игр? Алина: Реакция игроков разнообразна. Некоторые выражают обеспокоенность по поводу ограничения своих прав и свободы выбора, в то время как другие поддерживают идею защиты молодежи от азартных игр и зависимости. Андрей: Да, это действительно двусторонний вопрос. С одной стороны, есть беспокойство о защите молодых людей, с другой — вопросы свободы и автономии игроков. Алина: В конце концов, важно найти баланс между защитой и свободой, который удовлетворит как игроков, так и регуляторов. Андрей: Интересно, как игроки воспринимают эти ограничения. Какова общая реакция в игровом сообществе? Алина: Реакция игрового сообщества разделяется. Некоторые игроки выражают недовольство, считая, что ограничения урезают их свободу и выбор. Они обеспокоены тем, что это может повлиять на качество и разнообразие игр. Андрей: С другой стороны, есть игроки, которые видят в этих мерах позитивные стороны, такие как защита от зависимости и улучшение качества игр. Алина: Важно учитывать, что мнения разделяются, и это отражает разнообразие взглядов в игровом сообществе. Андрей: Также интересно рассмотреть, как эти ограничения могут повлиять на отношение игроков к игровой индустрии в целом. Алина: Да, это может вызвать у некоторых игроков разочарование и скептицизм по отношению к игровой индустрии, в то время как другие могут видеть в этом шаге положительное развитие. Андрей: Это также может вдохновить игроков быть более активными в обсуждении и формировании будущего игровой индустрии, выражая свои мнения и предложения. Андрей: А как, по-твоему, эти новые регуляции отразятся на крупных компаниях-разработчиках бесплатных игр с микротранзакциями? Алина: Это может заставить их пересмотреть свои бизнес-модели. Они могут искать новые способы привлечения и удержания игроков, которые не опираются исключительно на микротранзакции. Андрей: Также возможно, что они начнут больше фокусироваться на качестве игрового опыта и инновациях, чтобы привлекать игроков и удерживать их интерес. Алина: Другой аспект – это влияние на маркетинговые стратегии этих компаний. Им придется искать новые способы привлечения внимания к своим играм, возможно, через более творческие и инновационные подходы. Андрей: Верно, Алина. Это может также увеличить конкуренцию в индустрии, толкая компании к созданию более уникальных и привлекательных игровых продуктов. Конечно, давайте добавим немного юмора в наш подкаст! Андрей: Алина, как думаешь, если бы разработчики мобильных игр решили перейти на создание мобильных приложений для заказа пиццы, это был бы новый тренд? Алина: О, Андрей, это был бы революционный тренд! \"Закажи пиццу и победи босса\" - вот какой слоган можно было бы использовать. Игроки бы получили не только удовольствие от игры, но и вкусную пиццу! Андрей: Да, и теперь каждый босс может быть буквально съеден! Алина: Это был бы настоящий апгрейд игровой индустрии и пиццы! Андрей: А что, если бы разработчики решили сделать \"Бесплатные игры с микротранзакциями: Симулятор\"? Игроки могли бы оплачивать внутриигровыми деньгами за вещи, которые на самом деле не существуют. Например, \"Золото из воздуха\" или \"Меч из волшебных мыслей\". Алина: О, это было бы что-то! Игроки бы соревновались, кто наберет больше \"воздушного золота\" и создадут самые мощные \"мечи мыслей\". Но в конечном итоге, им пришлось бы понять, что деньги за воздух - это настоящая магия! Андрей: Игроки бы стали настоящими виртуозами в искусстве \"покупать ничего\". Алина: А разработчики бы стали миллионерами, продавая \"воздушное золото\"! Андрей: На самом деле, Алина, я слышал, что одна из компаний решила ввести новую микротранзакцию - \"Волшебный космический воздух\". Они говорят, что этот воздух улучшает игровой опыт и даже помогает выигрывать бои. Как думаешь, это настоящий прорыв или просто пустой воздух? Алина: Ну, Андрей, это точно даст игрокам \"воздушное преимущество\"! Но мне кажется, что это может вызвать бурю негодования среди игроков. Подумать только, как им придется собирать и хранить этот волшебный воздух! Андрей: Да, это был бы настоящий вызов для всех, кто решит использовать эту микротранзакцию. А может, им даже придется держать специальные баллоны с воздухом рядом с компьютером! Алина: Игроки бы стали настоящими аэрологами, изучая воздушные потоки в поисках выгодных моментов в игре! Андрей: Да, это была бы настоящая эра \"воздушных\" игр! Андрей: А как насчет \"Микротранзакции на удачу\"? Игроки могли бы покупать виртуальные \"амулеты счастья\", которые увеличивают шансы на победу в игре. Это было бы что-то! Алина: О, это интересная идея! Игроки могли бы собирать коллекцию амулетов и даже обмениваться ими с другими игроками. Кто знает, может быть, у кого-то будет \"амулет победы\"! Андрей: Но думаю, это также вызвало бы много споров о том, насколько справедливо использовать \"микротранзакции на удачу\" в соревновательных играх. Алина: Да, и мы бы видели игроков, которые проводят целые ритуалы и обряды перед каждым матчем, чтобы привлечь удачу! Андрей: И в конце концов, игры стали бы настоящими \"счастливчиками\"! Андрей: Мы хотим выразить огромную благодарность всем нашим слушателям и создателю подкаста \"Думфейс\" за вашу преданность и поддержку! Алина: Без вас, наш подкаст не был бы таким живым и интересным. Ваши отзывы и комментарии мотивируют нас и помогают нам делать контент, который вас интересует. Андрей: Спасибо, что были с нами в этом эпизоде, и продолжайте слушать \"Думфейс\"! Мы ждем вас в следующих выпусках. Алина: Спасибо за вашу верность и поддержку. До скорой встречи в мире подкастов! Web: https://d00m4ace.com/ GitHub: https://github.com/d00m4ace/ YouTube: https://www.youtube.com/c/@d00m4ace Telegram: https://t.me/d00m4ace_blog ← Предыдущая статья: Использование GitHub Copilot в Visual Studio 2022 для разработки 2D MMORPG игры с d00m4ace. DevLog#1 → Следующая статья: D00M4ACE подкаст 2 Стоит ли заниматься программированием в 2024 году? Copyright d00m4ace © 2024", "url": "/posts\\d00m4ace-podkast-1-padenie-stoimosti-aktsij-tencent-na-46-milliardov-dollarov-i-novyj-zakon-ob-onlajn-igrah-v-kitae\\"}, {"title": "D00M4ACE подкаст 2 Стоит ли заниматься программированием в 2024 году?", "body": "D00M4ACE подкаст 2 Стоит ли заниматься программированием в 2024 году? Блог Проекты Тэги Заметки Search D00M4ACE подкаст 2 Стоит ли заниматься программированием в 2024 году? #31 пятница, 29 декабря 2023 г. 35 минут(ы) 3354 слова #Podcast #GameDev #Code #GPT Этот подкаст с Андреем и Алиной обсуждает, стоит ли в 2024 году заниматься программированием, учитывая быстрое развитие технологий, особенно ИИ и бескодовых решений. Алина, имея опыт работы в Google, делится своими размышлениями о том, что программирование может стать тупиковой работой. Они обсуждают, как программирование утратило свой первоначальный статус и как теперь оно воспринимается в контексте социальных сетей и новых технологий. Андрей предлагает ввести термин \"иллюзия кодинга\", подобный \"иллюзии колледжа\", где людей обманывали, вталкивая в огромные долги и бесполезное образование. Они также обсуждают, как ИИ, вроде GPT, начинает выполнять некоторые задачи программирования, и как важно понимать рынок труда и не оказаться запертым в тупиковой профессии. Алина и Андрей рассуждают о будущем программирования, его взаимодействии с ИИ, и о том, что навык программирования по-прежнему остается важным для решения сложных задач, несмотря на автоматизацию и развитие ИИ-технологий. Транскрипция подкаста: Андрей: Привет, Алина! Сегодня обсуждаем важный вопрос: стоит ли в 2024 году заниматься программированием? Алина: Привет, Андрей! Ну, знаешь, я, как человек, который работал в Google, могу с уверенностью сказать — ответ неочевиден. Мы входим в эпоху ИИ, таких систем как GPT и бескодовых решений; рынок труда перенасыщен, и, кажется, кодинг сейчас учат все, включая бабушек. Андрей: Точно, Алина. Есть мнение, что программирование может стать тупиковой работой, если оно уже не стало таковой. Из поколения в поколение мы видим обвал целых профессиональных областей. Алина: Знаешь, Андрей, в прошлом году я вообще не кодировала. Путешествовала, недавно вернулась из Коста-Рики. Было здорово: джиплайнинг, ленивцы, птицы, обезьяны... И когда на ужине я встречалась с туристической группой, никто не хотел обсуждать кодинг. Это их скучало. Андрей: Конечно, Алина. Но вернёмся к нашей теме. Может, стоит ввести термин \"иллюзия кодинга\", похожий на \"иллюзию колледжа\", где людей обманывали, вталкивая в огромные долги и четыре года жизни на бесполезное образование, которое должно было быть билетом к успеху, но в итоге они заканчивали в Старбаксе. Алина: Да, это интересная аналогия. Многие действительно видят в программировании билет к успеху. Но важно понимать тенденции рынка и не оказаться запертым в тупиковой профессии. Андрей: Алина, тема программирования бесконечно актуальна. Скажи, считаешь ли ты, что в 2024 году программирование может стать таким же рутинным и неинтересным занятием, как обычная работа с 9 до 5 с заработком в 60 тысяч в год, не говоря уже о мечтах о миллионах? Алина: Андрей, забавно слышать такие мысли. Некогда программирование действительно считалось стартовой площадкой для будущих миллионеров вроде Марка Цукерберга или Илона Маска. Но реальность 2020-х уже далека от того. Не стоит иллюзий, что одна только способность писать код приведёт к успеху. Андрей: Совершенно верно. Индустрия изменилась. Пользователи уже не так часто качают новые приложения, а топовые сайты и соцсети захватили львиную долю интернет-трафика. К тому же появилось явление \"инфлюенсеров в кодировании\", которые нередко ничего не понимают в настоящем программировании. Алина: Именно, некоторые из них продвигают программирование как какое-то волшебное решение, путь к свободе, когда на самом деле, они просто продают мечту. Очевидно, что в наше время реальность программиста — это больше чем просто знание React или любого другого фреймворка. Андрей: Ты права. Утверждение, что React — это язык рабов, прозвучало бы чересчур радикально, но есть доля правды в том, что он был разработан, чтобы упростить задачу для массовой армии начинающих инженеров. Но мы не должны путать удобство и простоту с ограничением возможностей. Кодирование — это инструмент, и как любым инструментом можно пользоваться правильно или неправильно. Алина: И в то же время, важно понимать рынок и куда он движется. Ведь многие разработчики до сих пор не учитывают роль социальных сетей и решений без кода, которые открыли путь к успеху для целого поколения предпринимателей. Программирование должно работать вместе с этим новым уровнем медиа и потребителей. Андрей: Верно, и мы, как разработчики, должны научиться адаптироваться к этим изменениям, иначе рискуем остаться позади. Не говоря уже о том, что ИИ вроде GPT уже начинает выполнять некоторые задачи программирования. Алина: Интересный момент, Андрей. Впереди нас ждёт много работы, чтобы обеспечить нашей индустрии здоровое будущее; мы должны идти в ногу со временем. А самое главное, нужно понимать, что программирование — это не просто путь к богатству, это способ создавать, инновировать и решать проблемы, которые двигают мир вперед. Андрей: Алина, я недавно читал о том, как меняется восприятие программирования. Речь о том, что, за пределами Силиконовой долины, люди находят более динамичные и прибыльные способы заработка. Кажется, что инженеры-программисты всё больше становятся чем-то вроде рабочих рядов, и это приводит к ощутимым переменам в индустрии. Алина: Да, Андрей. Создаётся впечатление, что программирование уже не воспринимается как ремесло высокого статуса. И это довольно интересно, потому что программисты были в авангарде технологических инноваций долгие годы. Но сейчас мы видим, что они теряют своё влияние и социальный статус. Андрей: Возможно, это связано с тем, что алгоритмическое программирование уступает место машинному обучению, и инженеры чувствуют себя заменяемыми. Но мне кажется, что настоящее мастерство все равно остаётся востребованным. Так что вопрос не в том, стоит ли программировать, а в том, как мы определяем ценность этого навыка. Алина: Совершенно верно. Плюс не следует забывать о том, как меняется рынок труда. Цифровая номадичность, желание людей жить яркой и насыщенной жизнью — всё это влияет на то, как мы воспринимаем работу программиста. Тем не менее, я считаю, что программирование — это инструмент для решения проблем, и он всегда будет важен. Андрей: Ты права, Алина. Статус, в конце концов, может быть важен для некоторых людей, но инновации и способность преобразовывать идеи в реальность всегда будут в цене. Программирование как творческий и технический навык останется актуальным, независимо от экономических и социальных тенденций. Алина: И тут вступает в игру предпринимательство. Многие профессионалы, которые были бы превосходными программистами, теперь смотрят в сторону запуска своих проектов. Поэтому, даже если ты программист, важно понимать, что технология — это только инструмент для достижения более крупной цели, а ключевым навыком может стать способность видеть картину целиком. Андрей: Что касается программирования в 2024 году, мне кажется, есть два пути: \"рабское\" программирование и программирование предпринимателя. \"Рабское\" больше подходит для работы в большой корпорации, развивающее навыки, которые за пределами компании мало что стоят. Например, юнит-тестирование, React, Scrum, Agile, Redux. Алина: Совершенно верно, Андрей. Я бы добавила, что такие навыки, как чистота кода или паттерны проектирования, безусловно, важны, но они не всегда напрямую связаны с созданием дохода. С другой стороны, есть PHP и jQuery, которые часто считаются устаревшими, но по-прежнему остаются инструментами, способными приносить прибыль. Андрей: Я тоже люблю программирование, Алина. И иногда думаю о возвращении в Google, но я уже не на том этапе. Как и в кулинарии, с развитием карьеры программиста тебя ожидает роль шеф-повара, который управляет другими поварах. Алина: И тут мы подходим к заблуждению кодинга. Образование часто опирается на устаревшие университетские программы, в которых нет ни слова об ИИ или, например, ChatGPT. Они учат создавать операционные системы или базы данных с нуля, что сейчас не так актуально и определенно не то, что большинство начинающих разработчиков представляют себе, начиная свою карьеру. Андрей: Изменения в индустрии идут так быстро, что образование не успевает за ними. Ведь у нас есть Биткоин, DeFi, Web3, экономика контент-создателей и маркетинг в социальных сетях, и, разумеется, ИИ и многочисленные инструменты, основанные на них. Алина: Похоже, что возможности в этих областях могут не так столько принадлежать программистам, сколько тем, кто готов понять эти технологии, немного их отрегулировать и собрать воедино. Кодирование может и не будет основным занятием, кроме, может быть, разработки нескольких пользовательских интерфейсов или оберток. Андрей: Знаешь, Алина, я часто размышляю о будущем программирования, учитывая стремительное развитие ИИ. Меня постоянно спрашивают, остается ли место для программистов, когда ИИ, подобный GPT-4, продемонстрировал свои уникальные возможности. Алина: Да, Андрей, и это действительно серьезный вопрос. Важно понимать разницу между продуктами, использующими модели ИИ, и самих моделях. Как раз таки GPT-4 – это пример такой модели, и она на порядок сложнее предыдущих, с богатым набором параметров для принятия решений. Андрей: Согласен. И хотя многие склонны думать, что ИИ, вроде GPT-3.5, был не так впечатляющ, последние итерации демонстрируют значительные улучшения в понимании и взаимодействии с текстом. Алина: Это верно, и это заставляет задуматься: если ИИ продолжит развиваться с такой скоростью, стоит ли сейчас вкладывать время в изучение программирования? Но я думаю, что ключевым здесь является слово \"в конечном итоге\". Многие студенты и начинающие разработчики могут волноваться, что нужно бежать и изучать только самые популярные технологии, как React, чтобы \"заработать побольше до того, как ИИ берет верх\". Андрей: Верно, такой короткосрочный подход может показаться привлекательным, однако обучение фундаментальным концепциям в программировании всегда останется актуальным. Эти навыки помогают развивать глубокое понимание того, как работают технологии. Кроме того, они позволяют адаптироваться к новым инструментам гораздо быстрее. Алина: И при всем прогрессе ИИ, понимание человеческого контекста и сложности задач пока что остается за пределами его возможностей. Именно здесь человеческий программист остается незаменимым. Андрей: Плюс, смотря на то, как быстро сфера развивается, будущее программирования может просто превратиться в синергию человека и ИИ, где инструменты улучшают и автоматизируют процессы, а люди обеспечивают креативность и оригинальность подхода к проблемам. Алина: Итак, программирование в 2024 году по-прежнему остается важным навыком, который стоит изучать. ИИ, возможно, изменит индустрию, но основы программирования и способность решать сложные задачи – вот что определит ценных профессионалов в этой области. Андрей: Слушай, Алина, налицо парадокс: с развитием ИИ, казалось бы, стоило бы ожидать снижения потребности в программистах, но всё идёт ровно наоборот. Рынок ищет всё больше специалистов в этой области, и эта тенденция, кажется, будет только усиливаться. Алина: Ты прав, Андрей. И даже если мы примем во внимание возможный спад на рынке — а это, безусловно, случится рано или поздно — ключевой вопрос звучит как \"когда?\". чтобы как инвестор извлечь из этого пользу, необходимо спрогнозировать это событие достаточно точно. Андрей: Да, и то, что мы видим сейчас с улучшением эффективности языковых моделей, сначала рост шёл экспоненциально, но есть мнение, что скоро мы столкнемся с плато — точкой, после которой для дальнейшего прорыва потребуется новая фундаментальная научная идея. Появление архитектуры трансформеров, которые лежат в основе LLM, и было таким прорывом в своё время. Алина: Говоря о LLM и нейросетях, обнаружение и преодоление так называемой проблемы исчезающего градиента позволило нам строить куда более глубокие и обученные модели. Это настоящий прорыв! Андрей: И интересно, что если эффективность LLM продолжит расти, то — казалось бы, шутка — но мы можем оказаться на пороге возникновения что-то вроде Ультрона. И тогда наши беспокойства о рыночной ценности наших навыков по Python станут малозначительны. Алина: Действительно, и тогда самые горячие споры будут не о том, насколько актуальны твои технические навыки, а о том, как распределять блага, созданные машинами, или, что темнее, как уничтожить их до того, как они уничтожат нас. Андрей: Однако более реалистично предполагать, что прирост эффективности LLM будет линеен или даже пойдёт на убыль по мере насыщения данных. Если так, то знатоки — то есть, мы, работники знаний, — останемся важной частью мировой экономики на довольно долгое время. Алина: И в этом контексте, включение инструментов типа GPT-4, которые отлично генерируют текст и код, в работу наших проектов — не замена, а скорее, расширение и усиление наших возможностей как разработчиков. Андрей: А вы знаете, стоит ли в 2024 году заняться программированием? С развитием инструментов автоматизации, таких как GitHub Copilot или ChatGPT, у нас есть возможность повысить эффективность работы, что может значительно увеличить прибыль. Алина: Абсолютно верно, Андрей. Повышение эффективности — это ключевой фактор. Использование таких средств, как Copilot, даже если оно делает нас всего на 5% эффективнее, уже окупает себя. Однако, если подумать о том, чтобы заменить сотрудников искусственным интеллектом, это представляется сомнительным. Андрей: Да, это довольно интригующая идея. А теперь представим, если бы инструменты AI делали нас на 400% более эффективными. Возникнет ли вопрос о нужности сотрудников вовсе? Ведь, используя AI, мы можем взять на себя их работу и даже сэкономить время. Алина: Вот это точка зрения показывает микроскопическое видение бизнес-процессов. В конце концов, все сводится к балансировке между вложениями и отдачей. Умное вложение в рост всегда приведет к опережению конкурентов. И если благодаря AI стоимость разработки уменьшается, то возврат инвестиций увеличивается значительно. Андрей: И если у нас возможность делать больше работы на того же числа разработчиков, я бы нанял еще больше разработчиков, а не сократил их число. Смогли бы реализовывать больше проектов и быстрее. Алина: Совершенно правильно, именно так и работает успешный бизнес. Преимущества AI в ускорении и снижении стоимости разработки освобождают ресурсы и средства для новых вложений в разработку и новые приобретения экспертизы. Андрей: Но, нужно также понимать, в некоторых компаниях, где разработчики являются частью операционной системы, а не прямо приносят прибыль, AI может привести к сокращению штата. Например, в компаниях с внутренней разработкой для оптимизации операций. Алина: В этих случаях действительно может быть логика в пересмотре штата сотрудников. Но когда речь идет о разработке ПО, где каждый разработчик напрямую участвует в создании ценности и дохода компании, AI может лишь усилить необходимость в их экспертизе и увеличить масштаб команды. Андрей: В конечном счете, вопрос о том, стоит ли заниматься программированием в 2024 году, становится риторическим. Программирование продолжает быть базовым строительным блоком нашего цифрового мира, а AI лишь помогает нам еще более эффективно применять наши навыки для создания этого мира. Андрей: Алина, в последнее время много шума вокруг автоматизации программирования и возможностей LLM (large language models), таких как GPT-3. Что думаешь, насколько важно овладеть программированием в 2024 году? Алина: Андрей, думаю, есть много нюансов. В работе инженеров всегда было важно умение автоматизировать рутинные задачи, чтобы они могли заниматься более творческими проектами. С появлением инструментов low-code и LLM это становится ещё более актуальным. Андрей: Правда, Алина. Например, в 2000-х, чтобы что-то продавать онлайн, нужно было нанимать разработчика, который написал бы электронную коммерческую площадку с нуля. Теперь же для таких задач — Shopify, WooCommerce на базе WordPress. Алина: Верно, но даже при всей этой автоматизации, на рынке по-прежнему огромный спрос на разработчиков. Компании постоянно ищут преимущества, создавая внутренние инструменты для повышения эффективности, либо разрабатывая новые продукты. Андрей: Именно, и это касается не только простых задач. Посмотри на спрос на разработчиков во время COVID. Рынок решил, что рост будет продолжаться, и в итоге произошло перенасыщение. Но после кризиса стало ясно, что качество и уникальность решений всегда будут в цене. Алина: Так что рассуждая о программировании в 2024 году, нужно понимать, что инструменты типа LLM могут изменить спектр задач разработчиков, но не уменьшить их важность. Умение программировать может пригодиться в самых неожиданных сферах. Андрей: Совершенно с тобой согласен. Программирование всегда было о создании нового, и это ключевая составляющая инженерного мастерства. И в нашем мире, где технологии постоянно эволюционируют, способность понимать и управлять этими технологиями — ценнейший навык. Андрей: Алина, обсудим сегодня действительно горячую тему. На просторах IT сферы много споров о том, стоит ли начинать программировать в 2024 году. Мы видим огромный прогресс в области ИИ, но есть ли будущее у профессии программиста? Алина: Правда, Андрей, этот вопрос волнует многих. Я читала заметку на одном блоге о том, как люди, даже те, кто раньше не кодировали, начинают вникать в эту область благодаря новым инструментам, таким как ChatGPT. Но есть вопрос, сможем ли мы когда-нибудь заменить человеческую способность понимать и формулировать задачи на языке программирования сверхинтеллектом ИИ? Андрей: Отличная мысль. В конце концов, моделирование программных систем кодом дает нам более точное и менее двусмысленное описание по сравнению с естественным языком. Забавно, но если было бы можно сравнить программирование и английский язык, то, несмотря на все его сложности, код оказался бы на удивление более понятным. Алина: Абсолютно. Думаю, программирование с его лаконичной и четкой структурой гораздо проще для понимания и использования, чем естественный язык с его множественными особенностями и исключениями. Как разработчики, мы высоко ценим точность, и код предоставляет нам возможность точно и ясно выражать наши идеи. Андрей: Точно, Алина. И всё же, несмотря на все продвижения в создании ИИ, полноценно заменить человеческое мышление и творческий подход пока что не представляется возможным. Понимание контекста и тонкостей задачи остается в руках профессионального программиста. Алина: Верно, и это ни в коем случае не умаляет необходимость в обучении и развитии навыков программирования. Гуманно-машинное взаимодействие становится всё более сложным, и нам, как специалистам, важно продолжать совершенствоваться, чтобы оставаться в курсе последних тенденций и инноваций в технологиях. Андрей: В заключение, можно сказать, что программирование в 2024 году всё еще актуально и будет востребовано. Инструменты могут поменяться, методы могут эволюционировать, но способность разрабатывать и реализовывать инновации останется ключевой для любого ИТ-специалиста. Андрей: Понимаешь, Алина, эта перспектива вокруг искусственного интеллекта и конвенциального программирования очень захватывающая. Несмотря на то что кажется, будто AI может забрать у нас работу, я убеждён, что программирование останется важным. Код будет результатом диалогов между разработчиками, их знаниями. Алина: Ты абсолютно прав. Я часто слышу от людей страхи о том, что AI заменит их работы, но на самом деле это открывает новые возможности. Думаю, что следующие десять лет будут ключевыми для области no-code разработки и её ценности на рынке. Андрей: Интересно, что оптимизация всегда приводила к общественным изменениям, но также создавала новые возможности и повышала спрос. Так что, становится все более важным понимание кода, несмотря на рост AI-технологий. И даже если появятся модели AI, которые кажутся несовершенными, это лишь больше работы для нас. Алина: А ещё, столь ценной становится способность разбираться в том, как эти ошибки возникают. Как вы сказали, будет происходить некий \"внутренний скрещивание\" моделей AI, что окажет большое влияние на работу специалистов. Нам нужны люди, способные обучать, корректировать и развивать AI, чтобы он эффективно служил нашим потребностям. Андрей: Совершенно с тобой согласен. В этом и кроется красота программирования — оно становится гибридом технических и творческих навыков, где знание кода многократно увеличивает ценность специалиста. Андрей: Так, Алина, вот и подходим к ключевому вопросу: стоит ли в 2024 году браться за программирование? Ведь многие говорят, что всё больше задач отдается ИИ и автоматизации. Алина: Да, я слышала эти разговоры. Но знаешь, мне кажется, что страхи немного преувеличены. Программирование похоже на магический ингредиент, который умелый повар может превратить в гастрономический шедевр. ИИ еще долго не сможет насмехаться над забавной ошибке в коде, и не скоро он сможет насладиться вкусом хорошо написанной функции. Андрей: Вот это да, Алина, как поэтично. Но возможно, что кто-то занимается программированием не за вдохновением, а просто чтобы прокормиться. Скажем, если все автоматизируется, то возможно, что ценность \"серого кодерского\" труда упадет. Возможно, перед нами профессия будущего — инженер по обучению ИИ. Алина: Что ж, Андрей, тут возможно и кроется новый тренд. Но даже если ты наладчик ИИ, без базы программирования никуда. Это как в фильмах про космос: что бы не случилось, главное — не паниковать и знать основы, чтобы в случае чего всегда можно было выкрутиться. Андрей: О да, прямо выживание программера среди звёзд! Сейчас в моде говорить о том, что программисты будут устаревать как мамонты. Но главное не в программировании как таковом, а в решении проблем. Каждый раз, когда ИИ запутается в своем \"новом слое нейронов\", всегда найдется человек, который скажет: \"Так, стоп, дай-ка я тут кое-что подправлю\". Алина: Абсолютно согласна. Так и представляю, как ИИ в замешательстве скрестились \"провода\", и тут на сцену выходит человек с отверткой — программист 24 века. И не важно, что в этой отвертке — набор кодов или нейронная сеть. Главное, что нас, людей, не обойти! Андрей: И вспоминается шутка: \"Программирование — это как копать тоннель с ложкой. Иногда ты достигаешь другой стороны, а иногда снизу подкладывают поваренную книгу и говорят, что теперь туннель должен быть готовым наобед\". Так что, учиться программировать точно стоит. Как минимум, чтобы понимать, когда ИИ решает, что пора готовить обед посреди туннеля, а не копать его. Алина: Замечательный образ, Андрей! И это напоминает мне еще одну вещь: несмотря на всю власть автоматизации, ты не сможешь включить ИИ и уйти пить чай. Ты всё равно должен будешь что-то делать, следить, контролировать. Именно здесь пересекаются искусственный интеллект и человеческий интеллект — оба нуждаются друг в друге. Андрей: Так что, ребята, будущее подсказывает: учитесь программированию, ведь это не просто создание цифровых построек, это язык, на котором мы рассказываем нашу историю в бесконечной вселенной технологий. И дайте ИИ сигнал, когда следующий обед! Алина: Именно, Андрей. Ваши амбиции могут быть глобальными, а задачи — сложными, но в конечном итоге всё сводится к тому, как вы умеете общаться с машинами. И программирование — это первый шаг на этом пути. Андрей: Так что, даже если в 2024 году программирование станет немного не таким, как мы привыкли, оно останется ключом к разблокировке бесконечного числа цифровых дверей. Будь то игры, искусственный интеллект или следующая революционная социальная сеть, код остается за кадром. Алина: И вот на этой позитивной ноте, дорогие слушатели, мы завершаем сегодняшнее обсуждение. Не забывайте, что в мире кода всегда найдется место для новых и блистательных умов, готовых взять технологии за рога. Спасибо, что были с нами, и до новых встреч в эфире подкаста ДУМФЭЙС! Web: https://d00m4ace.com/ GitHub: https://github.com/d00m4ace/ YouTube: https://www.youtube.com/c/@d00m4ace Telegram: https://t.me/d00m4ace_blog ← Предыдущая статья: D00M4ACE подкаст 1 Падение стоимости акций Tencent на 46 миллиардов долларов и новый закон об онлайн-играх в Китае → Следующая статья: D00M4ACE подкаст 3 Прогноз на 2024 год в области искусственного интеллекта и разработки видеоигр Copyright d00m4ace © 2024", "url": "/posts\\d00m4ace-podkast-2-stoit-li-zanimatsja-programmirovaniem-v-2024-godu\\"}, {"title": "D00M4ACE подкаст 3 Прогноз на 2024 год в области искусственного интеллекта и разработки видеоигр", "body": "D00M4ACE подкаст 3 Прогноз на 2024 год в области искусственного интеллекта и разработки видеоигр Блог Проекты Тэги Заметки Search D00M4ACE подкаст 3 Прогноз на 2024 год в области искусственного интеллекта и разработки видеоигр #32 воскресенье, 31 декабря 2023 г. 43 минут(ы) 4239 слов #Podcast #GameDev #GPT #2024 В этом эпизоде подкаста Андрей и Алина обсуждают будущее искусственного интеллекта (ИИ) и разработки игр. Они обсуждают, как ИИ не только создает реалистичное поведение персонажей, но и помогает в решении сложных задач разработки игр. Беседа посвящена роли ИИ в персонализации игр, улучшении игрового опыта и влиянии на игровой дизайн. Они также обсуждают интеграцию виртуальной реальности и облачных технологий в игры, а также более широкие последствия для разработчиков и игроков. Также освещается потенциал ИИ в тестировании игр, процедурная генерация контента и этические аспекты использования ИИ для творчества. В завершение эпизода - размышления о будущих тенденциях и волнение вокруг возможностей ИИ и разработки игр. Транскрипция подкаста: Андрей: Привет, слушателей ждёт захватывающее обсуждение событий наступающего года в мире ИИ и разработки игр. Искусственный интеллект развивается бурными темпами, и с каждым годом он всё больше влияет на игровую индустрию. Алина: Привет, Андрей! Да, поистине увлекательная тема. Особо стоит отметить, что ИИ сейчас становится не просто инструментом для создания реалистичного поведения персонажей, но и помогает в автоматизации сложных задач в разработке игр. Андрей: Точно, используя ИИ, можно значительно ускорить процесс тестирования игры, выявлять и исправлять ошибки. А если подумать о возможностях машинного обучения в генерации контента, то впереди у нас может стоять революция в создании игровых миров. Алина: Нас ждет время, когда каждый игровой опыт будет уникальным, благодаря способности ИИ адаптироваться и реагировать на действия игрока, что сделает мир игры более динамичным и захватывающим. А ИИ также сыграет важную роль в персонализации игр, что может привести к совершенно новому уровню вовлеченности игроков. Андрей: И даже более того, я вижу, что многие игры начинают использовать нейросети для создания непредсказуемых поведенческих паттернов противников, что делает игровой процесс более интересным и менее предсказуемым. Алина: Невероятно важно обратить внимание и на то, как все эти изменения повлияют на разработчиков — особенно на командную работу и потребность в специалистах, способных создавать эти новые системы и интегрировать их в игры. Андрей: Будущее принесет новые вызовы для разработчиков, но в то же время — захватывающие возможности для экспериментов и инноваций. Что считаешь об области видеоигр, Алина? Какие инновации тебя возбуждают больше всего? Алина: Меня очень привлекает идея создания более глубокого взаимодействия между игроком и игровой вселенной. С повышением мощности технологий реальной виртуальности мы столкнёмся с играми, которые будут не просто развлечением, но и способом расширения реальности, где игроки смогут выражать себя и взаимодействовать на уровне, который раньше был невозможен. Андрей: Безусловно, виртуальная реальность — это одна из областей, где можно ожидать значительных прорывов. Становление облачных технологий также позволит играм стать более доступными на различных устройствах, снижая потребность в дорогом аппаратном обеспечении для пользователей. Алина: И это, в свою очередь, может расширить аудиторию игр, делая их еще более популярными и востребованными по всему миру, включая регионы, где доступ к мощному игровому оборудованию ограничен. Но все эти изменения также поднимают вопросы о будущем геймдизайна, и как именно разработчики будут адаптироваться к этим новым технологическим веяниям. Андрей: Абсолютно верно. И геймдизайнеры будут искать новые способы взаимодействия, механики, провоцирующие эмоции и предоставляющие захватывающие истории. Нам остается следить за этими изменениями и быть готовыми к тому, что игровая индустрия как всегда не перестанет нас удивлять своими инновациями. Андрей: Вообще, знаешь, я размышлял о том, какие прогнозы можно делать на 2024 год в плане искусственного интеллекта и разработки игр. Мы уже видели, как игры становятся все более сложными и интерактивными. Так что я думаю, что будущее за интеллектуальной автоматизацией разработки, где ИИ может помочь создавать плавные анимации и даже участвовать в дизайне уровней. Алина: Согласна, и тут приходит на ум то, как ИИ может повлиять на кастомизацию игрового процесса под конкретного игрока. У меня есть предчувствие, что персонализация игрового опыта станет еще более развитой, и ИИ будет играть ключевую роль в этом процессе, предлагая игрокам уникальные сценарии и изменяющиеся сюжетные линии на основе их предпочтений. Андрей: Наверняка, и помимо улучшения персонализации, я думаю, что мы увидим больше примеров того, как ИИ может помочь разработчикам в тестировании игр. По сути, ИИ может брать на себя роль игроков, проходя уровни и подыскивая нетривиальные стратегии, чтобы обнаружить баги и проблемы до того, как игра выйдет в свет. Алина: И это очень важный аспект. Кстати, в разговоре об инновациях не стоит забывать о VR и AR. Я думаю, что в ближайшие годы эти технологии сделают еще более смелые шаги вперед и станут еще более интегрированными в процесс разработки игр, предлагая еще более погружающие и реалистичные опыты. Андрей: Ты права, и тут мне интересно посмотреть, как ИИ будут взаимодействовать в таких погруженных средах. Если сейчас они могут управлять NPC (неконтролируемыми персонажами), представь, что будет, когда они начнут адаптироваться к действиям и реакциям игроков в реальном времени в VR. Алина: Действительно, возможности кажутся безграничными. Но помимо технических аспектов, думаю, стоит отметить и то, как все эти технологии помогут усилить эмоциональное воздействие игр. Сочетание ИИ, VR и AR может создать эмоциональные опыты, ранее не представляемые в видеоиграх. Андрей: Этот эмоциональный аспект, кстати, будет играть не последнюю роль и в сюжетных играх. Я не удивлюсь, если ИИ-системы начнут помогать в создании сюжета, динамично корректируя его в зависимости от выборов и стилей игры конкретного пользователя. Алина: Именно этот уровень интерактивности может и определить будущее гейминга. Как разработчики, мы должны быть готовы к этим изменениям, а как игроки — мы точно можем ожидать волнующих и незабываемых приключений. Андрей: Алина, представляешь, какие перспективы открываются перед нами в сфере искусственного интеллекта в музыкальном дизайне? Возможность использовать ИИ для создания адаптивных и уникальных звуковых треков для видеоигр может радикально изменить нашу работу над аудиальной частью игр. Алина: Ты прав, Андрей. Искусственный интеллект в музыке – это революционное направление, которое объединяет творчество и технологии, позволяя нам достигать новых высот в персонализации игрового процесса. Андрей: Недавно я читал историю одного инди-разработчика, его игра накануне релиза уже имела столько добавлений в список желаемого на Яндексе, что это вызывало восторг. Но также подчёркивало важность правильного подхода к маркетингу и взаимодействию с сообществом, что он и сделал, отложив разработку и сконцентрировавшись на промо-активностях за месяц до запуска. Алина: И его старания оправдались, когда игра в день релиза собрала миллионы просмотров в социальных сетях и на RuTube. Невероятно вдохновляющая история, подтверждающая значение маркетинга и подготовки перед запуском игры. Андрей: И ведь, если говорить о 2024 годе, мы видим, что этот тренд продолжает развиваться. В обученииигроделию появляется всё больше курсов, в том числе от практикующих разработчиков, что даёт студентам огромное преимущество - настоящее погружение в реальные условия игровой индустрии. Алина: Совершенно верно, Андрей. И зрелище - прослеживать, как эти студенты выходят из зоны комфорта и ступают на путь создания своих игр. Мы тут, чтобы поддержать их, ведь это путь осознанный и требующий значительной отдачи. Андрей: Так же мы стремимся вдохновить будущих разработчиков, показывая им, как увлекателен может быть процесс создания игр, и делаем это через работу над нашими собственными проектами. Алина: И хотя мы знаем, что доходы от первой игры могут быть скромными, важно понимать, что каждый процесс, каждый выпущенный проект учит и приближает к возможному финансовому успеху. Но без реалистичных ожиданий и тщательного планирования ничего не получится. Андрей: Да, имея план и пошаговую стратегию на каждый месяц, понимая, что необходимо делать, можно добиться серьёзного прогресса за год. Мы должны учить не только как создавать игры, но также как их продвигать и привлекать аудиторию. Алина: И мы всегда готовы предоставить дополнительные ресурсы и знания для тех, кто хочет углубить свои навыки в любом из этих направлений. Просто подписывайтесь на наш канал и следите за обновлениями. Андрей: Имей в виду, что успех — это результат усилений, инвестиций времени и, конечно, терпения. Будь готов столкнуться с препятствиями и будь последователен в своих действиях на пути к выпуску игры. Алина: И начало нового года — это прекрасная стартовая точка для всех этих усилий. Надеемся, что наши советы и поддержка помогут вам в этом путешествии. Андрей: Алина, я думаю, это будет год, когда разработчикам нужно точно определить свои приоритеты и максимально фокусироваться на том, чтобы привести свои идеи в реальность. Те, кто сможет посвятить себя проекту, увидят значительный рост эффективности. Алина: Ты затронул очень важную тему, Андрей. В коучинге много говорят о значении командной работы. Мне кажется, что инди-разработчикам, привыкшим работать в одиночку, стоит рассмотреть возможность совместной работы. Совместные усилия могут привести к более значительным и быстрым результатам. Андрей: Это точно. Даже в условиях такой одинокой дисциплины, как разработка игр, наличие коллектива существенно помогает. Не говоря уже о тех моментах, когда теряешь вдохновение, и здесь поддержка коллег просто незаменима. Алина: Да, ведь работать вместе – значит иметь возможность делиться, мотивировать друг друга и преодолевать трудности вместе. И я бы добавила, что не стоит пытаться в одиночку построить свой движок для игр, лучше использовать готовые решения, чтобы сосредоточиться на креативной части процесса. Андрей: Правильно, инструменты приходят и уходят, а идеальные игры живут в вечности. Главное, чтобы инструменты служили созданию игры, а не отвлекали от этой цели. Алина: Так точно, Андрей. И не следует забывать о планировании. Как говорится, на войну без плана не ходят, и разработка игры – это своего рода битва, где недостаток полного понимания тактики и стратегии ведет к фиаско. Андрей: Идеи в головах разработчиков – это сокровищница, Алина. И то, как ты воплощаешь эти идеи, может либо поднять, либо опустить весь проект. Важно с тщанием обдумать каждую идею, прежде чем инвестировать в ее разработку. Алина: О да, запись и анализ идей – это незаменимый инструмент. Даже простой дизайн-документ может помочь лучше ощутить идею и реализовать её максимально эффективно, особенно в команде. Андрей: И порой, из всего списка возможных проектов, нужно выбрать наиболее жизнеспособный. Это может быть сложно, но настоящий талант в разработке заключается в способности фокусироваться. Алина: Очень важно понимать пределы своих способностей и сочетать их с реалистичным пониманием своих возможностей. Недооценка или переоценка собственных ресурсов – это самые общие причины провала. Андрей: А если говорить о трендах в искусственном интеллекте, то стоит упомянуть роль ИИ в упрощении рутинных задач при разработке игр, что позволяет творцам сосредоточится на самом важном – креативном процессе. Алина: Верно. И в 2024 году отражение текущих тенденций в ИИ откроет новые возможности для жанров, которые раньше считались сложными для малых коллективов или инди-разработчиков. Это захватывающее время для индустрии! Андрей: Алина, кстати, на днях задумался о подготовке игры к запуску на Яндекс.Маркет. Многие разработчики откладывают это на последний момент, но, по-моему, нужно публиковать страницу как можно раньше. Ведь это дает возможность уже на ранних этапах привлекать внимание к проекту, собирать фидбек и строить сообщество вокруг игры. Алина: Верная мысль, Андрей. Я тоже сторонница того, чтобы начинать маркетинг одновременно с разработкой. Как только у нас появляется что-нибудь презентабельное, скажем, впечатляющий скриншот или гифка, стоит это добавить на страницу. Это важный шаг для тестирования идеи и понимания, \"зацепит\" ли она целевую аудиторию. К тому же, у нас есть возможность показывать прогресс и регулярно обновлять контент, что позволяет держать интерес на высоком уровне. Андрей: Абсолютно с тобой согласен, да и Яндекс.Маркет — отличная площадка для раннего тестирования подходов к рекламе игры и строительства сообщества. Это же помогает найти тех энтузиастов, которые возможно захотят принять участие в раннем доступе, что для нас, как разработчиков, бесценно. Алина: Так вот именно поэтому я и уверена, что начинать следует с вертикального среза. Он показывает основные моменты и даёт реальное представление о том, как игра будет \"дышать\". Это же отличный способ получить конкретный, осмысленный фидбек от аудитории. Андрей: И каждый прототип, который мы проверяем, должен переходить в этот вертикальный срез. А затем, используя обратную связь, мы непрерывно его дорабатываем. Похоже, что этот процесс станет одним из ключевых трендов в разработке игр на 2024 год. Алина: Совершенно верно, и очень хочется видеть, как эти методы изменят подход к созданию видеоигр и какие уникальные и инновационные проекты благодаря этому появятся в свет. Андрей: Вот это будет интересный год для искусственного интеллекта и разработки игр! В области ИИ стоит ожидать продвижения в направлении этой технологии помощи разработчиков. Представь, модели ИИ, которые помогут значительно ускорить процесс создания контента: от диалогов до моделирования уровней. Алина: Как это повлияет на креативность разработчиков, интересно. Возможно, ИИ даст толчок к новым жанрам и игровым механикам, к которым мы даже не можем быть готовыми. Но и важно помнить об этических аспектах использования ИИ в творчестве и разработке. Андрей: Абсолютно, Алина. И помимо этого, реальный рост ожидается в поддержке геймдев-команд через улучшенные средства совместной работы и инструменты проектного менеджмента, заимствованные прямо из ИИ. Удобное распределение задач, оптимизированный рабочий процесс – это то, что может серьёзно изменить правила игры. Алина: А как насчет изменений в монетизации, Андрей? Стремление к подписным моделям, внутриигровые покупки, интеграция с е-коммерцией. Видится, что привычные подходы будут трансформироваться, чтобы предложить игрокам еще больше стоимости. Андрей: Да, и в этом контексте, возможно, мы увидим более глубокую интеграцию ИИ для анализа поведения игроков, чтобы предлагать им наиболее релевантный контент. А индустрия развлечений в целом постоянно ищет новые пути для углубления вовлечения аудитории, благодаря чему мы получаем всё более персонализированные и увлекательные игровые опыты. Алина: В контексте персонализации, важно не забывать про уважение к конфиденциальности пользователей. Уже сейчас многие размышляют над тем, как правильно балансировать полезность ИИ и приватность. Андрей: И, возможно, здесь придёт на помощь блокчейн для обеспечения безопасности данных и создания надежных пользовательских профилей, в то время как игры могут стать платформами для социального взаимодействия, нечто вроде MailRu, но с игровым уклоном. Алина: Интересно ещё и то, как все эти технологии блокчейна, ИИ и новые игровые механики сыграют вместе в деле улучшения игрового процесса. Пространство для экспериментов огромно, и у меня есть предчувствие, что 2024 год принесёт нам много удивительных проектов. Андрей: В любом случае, будь то ИИ, блокчейн, или новые формы монетизации, все это круто влияет на процессы разработки и игровой опыт. Невероятно важно оставаться готовым учиться и приспосабливаться к новым реалиям, чтобы и дальше создавать захватывающие игры, не правда ли? Алина: Абсолютно согласна. И подходит нам к концу наш сегодняшний разговор. Спасибо за ваши мысли, Андрей, и спасибо нашим слушателям за то, что они с нами. Остаёмся в курсе всех новинок в индустрии ИИ и геймдева вместе с подкастом ДУМФЭЙС! Андрей: Впечатляющие цифры, и я верю, что ИИ сыграет значительную роль в достижении этих высот. Интеграция ИИ в мобильный гейминг может повысить вовлеченность игроков и обеспечить беспрецедентно персонализированный игровой опыт. Я убежден, что использование алгоритмов машинного обучения для анализа поведения игроков и адаптации игрового процесса станет стандартом. Алина: Ты каснулся важного аспекта персонализации. И это не просто об алгоритмах, которые следят за поведением игроков, но и о создании более инклюзивных и адаптивных игровых миров. Конечно, это представляет собой уникальные вызовы с точки зрения дизайна и разработки, но возможности для творчества и инноваций кажутся безграничными. Андрей: Точно. И помимо персонализации, ИИ обещает улучшить и оптимизацию в играх. Умные системы могут автоматизировать множество процессов от балансировки игры до обнаружения и исправления ошибок в реальном времени, что было бы немыслимо всего лишь десять лет назад. Алина: И во все эти инструменты вносится человеческий элемент, подкрепленный психологией, чтобы сделать их действительно полезными. Не забывай, одним из основополагающих принципов в разработке игр является создание эмоционального ответа, а ИИ может нас в этом поддержать, обеспечивая разработчикам инструменты для измерения и понимания эмоций игроков. Андрей: Эмоции — это то, что заставляет игру заиграть новыми красками, и я уверен, что мы увидим больше игровых компаний, интегрирующих эмоциональный интеллект ИИ в свои проекты, что может открыть дверь в новую эру игровых переживаний. Алина: Все эти разговоры о ИИ, Андрей, напоминают мне, что технологии не стоят на месте и важно не упустить момент, чтобы воспользоваться ими. 2024 год обещает быть невероятно захватывающим для нас, как разработчиков и игроков. Андрей: Согласен. Остается только посмотреть, какие именно инновации станут лидерами и как они повлияют не только на игровую индустрию, но и на нашу культуру и образ жизни. Андрей: Нас особенно впечатляет, как стремительно развивается мобильная игровая индустрия. Выручка, возможно, достигнет почти 91 миллиарда долларов в этом году, и это рост впечатляет. Развитие мобильных игр доказывает, что это уже не просто развлечение на скорую руку, а полноценная платформа с глубокими и запоминающимися играми. Алина: И это невероятно захватывающе, учитывая, что новые технологии, как 5G, будут стимулировать еще более качественный и плавный игровой процесс на мобильных устройствах. Потенциал для мобильных игр не знает границ благодаря этому. Андрей: А вот тема AR и VR остается на пике популярности. По-настоящему погружение в игру через такие технологии создает невероятные возможности для разработчиков и пользователей. Алина: И хотя некоторым играм для полноценной работы требуется солидное \"железо\", облачные технологии могут обойти эту проблему, делая тяжелые игры доступными для широкой аудитории. Так что речь идет не только о графице и производительности, но и об универсализации доступа к качественному игровому контенту. Андрей: На этом фоне продолжает эволюционировать и монетизация игр. От традиционных покупок и рекламы мы движемся к созданию ценности через подписки, предлагая игрокам безрекламные варианты с эксклюзивным контентом. Это изменяет не только отношение к игре, но и долгосрочные стратегии разработчиков. Алина: Развитие подписочных моделей влечет за собой перемену в отношениях между игроками и разработчиками. Создается социальная и экономическая среда в которой обе стороны заинтересованы в поддержании и улучшении игрового процесса. Это, безусловно, способствует росту качества и удовлетворенности пользователей. Андрей: При этом нельзя упускать из виду вселенную мета, которая всё больше становится местом не только для развлечений, но и для работы и общения – это целые миры внутри наших экранов. Наши повседневные технологические взаимодействия сливаются с виртуальными пространствами, и мы становимся свидетелями совершенно новой эры взаимодействие человека и машины. Андрей: В последнее время часто задумываюсь о том, как разнообразие в играх становится все более существенной чертой. Открывает огромные возможности не только в плане геймплея, но и влияния на культуру и восприятие самой индустрии. Думаю, это станет одним из ключевых факторов в 2024 году. Алина: Верно, разнообразие и инклюзивность играют огромную роль. Сегодня стало критически важно не только предлагать разнообразные персонажи и сюжеты, но и обеспечивать доступность для широкого спектра игроков. Разработчики всё больше стремятся к тому, чтобы их игры были приятными и удовлетворяющими для самых разных аудиторий. Андрей: Кстати о технологиях, Алина, кажется, что ИИ начинает играть все более заметную роль в оптимизации игрового процесса и создании умных NPC. Это позволяет игрокам погружаться глубже в игровые миры, где поведение персонажей становится еще более реалистичным. Алина: Я вижу, что использование ИИ для управления поведением NPC, а также для анализа и адаптации к действиям игрока, значительно улучшает впечатления от игры. Это как будто открывает новый уровень взаимодействия, где каждое решение игрока влияет на мир вокруг него в уникальный и непредсказуемый способ. Андрей: Это правда, и то, как ИИ адаптируется к выборам игроков, придает играм новый уровень персонализации. Вижу, что отрасль нацелена на создание более глубоких, эмоциональных опытов, где ИИ является не просто технологическим инструментом, а способом рассказать историю более убедительно. Алина: Да, и помимо собственно разработки игр, ИИ также вносит большой вклад в улучшение опыта игрока за счет персонализированных рекомендаций, автоматического масштабирования сложности и создания динамических игровых миров. Кажется, будущее принесет еще более утонченные системы, которые буквально \"читают\" игрока, делая виртуальные миры живее. Андрей: Именно, Алина. Я на самом деле взволнован возможностями, которые открывает ИИ для кастомизации игрового процесса. Такие инструменты как машинное обучение и анализ данных уже открывают невероятный потенциал для создания высокоадаптивных и интересных игр. Алина: Интересно отметить, Андрей, что с усовершенствованием ИИ мы также видим рост заботы о безопасности и приватности. Стоит надеяться, что индустрия продолжит работать в этом направлении, поддерживая баланс между инновациями и защитой информации игроков. Андрей: Абсолютно согласен, это ключевые аспекты. С каждым днем вопросы безопасности и надежной работы систем становятся все более актуальными, особенно когда мы говорим о взаимодействии с ИИ и большими данными в играх. Эти проблемы наверняка останутся в центре внимания в следующем году. Алина: Подведем итоги, Андрей, мы видим, что развитие искусственного интеллекта и инклюзивных практик в геймдеве будут формировать не только новые технологии и подходы в игровой индустрии, но и влиять на саму культуру игр в 2024 году. И это настоящее возбуждающее время для нас всех, кто работает и развивается в этой области! Андрей: Ну что, Алина, если говорить о прогнозах на 2024 год, то одним из ключевых моментов для меня будет разнообразие в дизайне игр. Рост внимания к различным культурам и представленности в играх действительно создаёт богатые переживания для игроков. Алина: Совершенно верно, Андрей. И мы видим, как это разнообразие способствует более широкому привлечению аудитории. Это ведет к созданию игр, которые по-настоящему глобальны и инклюзивны. Андрей: К тому же не стоит забывать об экологической устойчивости в разработке. Сейчас крайне важно для игровых компаний показывать пример в этом вопросе. Алина: Это правда. Игроки осознают, как их увлечение влияет на окружающую среду, и в increasing numbers ищут способы снизить этот воздействие, в том числе и через поддержку \"зелёных\" игр. Андрей: Это изменяет игровую площадку и для регуляторов, которые вводят новые правила, касающиеся приватности, борьбы с лутбоксами и возрастного рейтинга. Алина: Игроделы будут учиться, как сохранить захватывающий игровой опыт, несмотря на новые ограничения, что без сомнения стимулирует инновационный подход к монетизации. Андрей: И касаясь эко-технологий, стоит отметить, что многие студии уже снижают свои энергозатраты и переходят на возобновляемые источники энергии. Алина: Да, и ведущие компании инвестируют в экологические инициативы, создавая партнёрства с организациями в этой области, что положительно сказывается на их бренде. Андрей: Возвращаясь к разговору об ИИ, мы видим его всё более глубокое проникновение в индустрию. Процедурная генерация, умные NPC, все это привносит в игры неимоверное разнообразие и уникальность. Алина: И не только в создании миров и персонажей, но и в таких вещах, как путинаходение. ИИ помогает создавать оптимальные маршруты для NPC, оживляя игровой мир. Андрей: Действительно, игроки получают возможность каждый раз исследовать что-то новое, это держит их интерес на высоком уровне. Алина: Точно, ИИ открывает массу возможностей для персонализации игрового процесса, создавая бесконечный источник новизны для игроков. Андрей: И важно отметить, что это только начало, технологии быстро развиваются, и я уверен, что ИИ будет играть ещё более значимую роль в будущем разработки игр. Алина: Согласна, и эта динамика изменений в ИИ и мобильном гейминге будет определенно увлекательной для наблюдения на протяжении следующего года. Андрей: Слушай, Алина, насчет прогнозов на 2024 год в области искусственного интеллекта и разработки видеоигр. Похоже, что ИИ будет все больше и больше входить в творческие и технические аспекты создания игр. Мы можем ждать продолжения революции в процедурной генерации контента, например. Алина: Определенно, Андрей. ИИ уже помогает в создании реалистичных и уникальных игровых миров, но может быть, к следующему году мы увидим его еще и в улучшении поведенческих моделей NPC. Это откроет перед разработчиками огромные возможности для создания более глубоких и интерактивных игровых персонажей. Андрей: И помимо этого, Алина, не надо забывать, что ИИ может сыграть ключевую роль в персонализации игрового опыта. Мы видим начало эры, где игра адаптируется под стиль и предпочтения каждого игрока. Алина: В точку. Вспомни, что обсуждали ранее. Эта технология также изменит и то, как мы работаем в командах, как управляем проектами и как сотрудничаем. Эмоциональный интеллект ИИ может помочь улучшить командную динамику, а это значит, что проекты станут более эффективными. Андрей: Конечно, это влияние ИИ на процесс разработки и командные взаимодействия – невероятно важно. Интересно, насколько индустрия будет готова к таким изменениям? Учитывая текущие тренды, нам определенно стоит ожидать новых инструментов и подходов в ближайшие годы. Алина: Также стоит подумать о социально-этических аспектах, Андрей. Как эти технологии повлияют на нашу повседневную жизнь, на культуру, на вопросы конфиденциальности и неприкосновенности частной жизни. Не все так просто, как может показаться на первый взгляд. Андрей: Это прямо в яблочко. Мы на пороге новой эры во взаимодействии человека и машины, и стоит быть готовыми к этим переменам. И конечно же, мы будем следить за этими трендами и держать наших слушателей в курсе всех самых последних новостей и разработок. Алина: А пока что, дорогие слушатели, продолжайте задавать вопросы, быть любознательными, и исследовать эти удивительные перспективы вместе с нами. Не может быть более захватывающего времени быть частью этой индустрии! Андрей: Совершенно верно, Алина. С нетерпением ждем, чтобы увидеть, что 2024 год принесет нам в мире ИИ и геймдева. До встречи в следующем выпуске подкаста ДУМФЭЙС! Алина: До скорого, и продолжайте играть, создавать и мечтать! Андрей: С вами как всегда Андрей, и, знаете, я недавно подумал, что если бы ИИ стали по-настоящему умными, они бы наверное потратили весь свой интеллект на то, чтобы максимально эффективно прокрастинировать. Алина: И это прямо в точку! Привет всем, я Алина, и да, представьте, ИИ помощник, который вместо выполнения задач за вас, советует посмотреть новый эпизод любимого сериала. Но, конечно, переместься от шуток к нашему сегодняшнему обсуждению: что ждёт мир ИИ и разработки игр в 2024 году? Андрей: А я слышал, что ИИ собираются научить делать чай. Похоже, в 2024 году роботы сменят нам не только работу, но и бариста в кофейне! Алина: Да, и тогда у утреннего кофе будет математически идеальное соотношение молока и кофе. А если серьёзно, в 2024 году мы, наверное, увидим ещё больше применений ИИ в персонализации игрового опыта, не так ли? Андрей: Определенно. Игры становятся всё более интерактивными и гибкими, благодаря алгоритмам машинного обучения, которые адаптируют сложность и содержание под каждого игрока. Это не только поднимает планку в игровом дизайне, но и создает невообразимые ранее возможности для сторителлинга. Алина: И это точно воздействует и на разработчиков, и на игроков. Тем более что новые технологии помогают командам более эффективно организовать работу, уделить внимание креативности и, возможно, уменьшить риски выгорания. Андрей: Кстати, на тему выгорания, я думаю, ИИ в 2024 году обязательно выработают алгоритм предотвращения кризиса среднего возраста у разработчиков — назовем его \"Mid-life Crisis Management Protocol\". Алина: Но если серьезно, вполне возможно, что ИИ будут интегрированы в системы управления проектами, помогая отслеживать благополучие и эффективность команд. Это позволит максимизировать их потенциал и предотвратить перегрузки. Андрей: Итак, уважаемые слушатели, как всегда, великолепно провели время, обсуждая будущее ИИ и геймдева с вами. Алина: Спасибо за ваши уши и внимание, мы надеемся, что сегодняшний разговор вдохновил вас. И конечно, спасибо создателям подкаста ДУМФЭЙС за возможность поделиться нашими мыслями с вами. Андрей: До новых встреч в эфире, дорогие друзья, и не забывайте – будущее уже здесь, оно просто не равномерно распределено. Всего хорошего! Алина: До свидания, и пусть ваши проекты всегда играют в цвета вашей креативности! Web: https://d00m4ace.com/ GitHub: https://github.com/d00m4ace/ YouTube: https://www.youtube.com/c/@d00m4ace Telegram: https://t.me/d00m4ace_blog ← Предыдущая статья: D00M4ACE подкаст 2 Стоит ли заниматься программированием в 2024 году? → Следующая статья: D00M4ACE подкаст 4 Почему все ненавидят YouTube shorts Copyright d00m4ace © 2024", "url": "/posts\\d00m4ace-podkast-3-prognoz-na-2024-god-v-oblasti-iskusstvennogo-intellekta-i-razrabotki-videoigr\\"}, {"title": "D00M4ACE подкаст 4 Почему все ненавидят YouTube shorts", "body": "D00M4ACE подкаст 4 Почему все ненавидят YouTube shorts Блог Проекты Тэги Заметки Search D00M4ACE подкаст 4 Почему все ненавидят YouTube shorts #33 среда, 3 января 2024 г. 36 минут(ы) 3544 слова #Podcast #GameDev #YouTube #shorts #TikTok В этом эпизоде подкаста ведущие Андрей и Алина обсуждают растущее недовольство YouTube Shorts в 2024 году. Они обсуждают, как шорты затмевают традиционный длинный контент, заставляя создателей адаптировать свои стратегии для обеспечения видимости и релевантности. Подчеркиваются проблемы монетизации, возникающие при создании шортов, с акцентом на их ограниченную доходность, несмотря на усилия и время, необходимые для создания. В ходе обсуждения также затрагиваются более широкие последствия для средних каналов YouTube и динамика развития платформы, сравнивается траектория развития YouTube и рост популярности TikTok. Транскрипция подкаста: Андрей: Привет, Алина! Ну что, сегодня у нас в программе довольно горячая тема - почему все так ненавидят Shorts на YouTube. Алина: Привет, Андрей! Да, и ведь неудивительно. Кажется, что Shorts могут кардинально изменить всё, к чему мы так привыкли на YouTube, и не в лучшую сторону. Андрей: И правда, стоит только открыть главную страницу, и уже половина экрана занята короткими видео. Это серьезно уменьшает видимость длинных видео, которые создатели контента традиционно готовили. Алина: Это правда, и это ведь не просто вопрос формата. YouTube в этом году активно продвигает Shorts, практически заставляя создателей включать их в свою стратегию, если они хотят оставаться востребованными. Андрей: И тут возникает проблема, потому что хоть создание Shorts и требует времени и усилий, экономически это практически бессмысленно. Они почти не приносят дохода, а ведь и это – часть большой работы. Алина: Да, это может серьезно ударить по средним каналам на YouTube, которые и так борются за выживание. Представь, твоё творчество, вложенная работа и время - всё это смещается на второй план ради нескончаемого потока коротких видео. Андрей: Совершенно верно, Алина. Становится очевидно, что YouTube идет по стопам TikTok, но вопрос в том, нужно ли это сообществу и самой платформе? Что за этим следует для контента и для нас, как для зрителей и создателей? Алина: Наблюдать за этими изменениями и адаптироваться к ним будет ключевым для всех, кто связан с YouTube. Но как всегда, Андрей, наша задача – помочь нашим слушателям понять эти изменения, и найти наилучшие стратегии адаптации. Андрей: Совершенно верно. И под этим мы не понимаем простое копирование формата, а разработку собственного подхода, который позволит сохранить уникальность контента и лояльность аудитории. Андрей: Ну, на самом деле, видеоконтент в последнее время ощутимо меняется, и у меня есть опасения по этому поводу. У меня есть знакомые создатели контента, которые говорят о том, как сложен этот год для них из-за непредсказуемого падения просмотров. Они посвятили свою жизнь созданию видео и развитию своих маленьких бизнесов вокруг этого, но сейчас они буквально борются за выживание, потому что их просмотры пропадают за одну ночь. Алина: Да, Андрей, это действительно серьезная проблема. Особенно если учесть, что не у всех каналов есть финансовые ресурсы или возможность просто создать пару дополнительных видео для восстановления просмотров. Смотрю на эту ситуацию, и мне кажется, что боль больше средних каналов будет только расти. Андрей: Сомнений нет, что если текущая тенденция изменений продолжится, то скоро пострадают и другие категории создателей. Кстати, пикантный факт: несмотря на то что с помощью шорт-видео, похоже, мы знакомимся с большим числом авторов, я боюсь, что именно эта тенденция может покончить с самой идеей контент-криэйторства. Алина: Надо признать, шорты появились не просто как еще один способ творческого выражения или новый формат для зрителя, но как ответ на популярность TikTok. Это борьба за внимание аудитории, и здесь нет места пассивности. К слову, лет так пять назад YouTube оценивал успех видео на основе количества просмотренных минут, так что длинные видео были на вес золота. Андрей: И это довольно серьёзное изменение. Те, кто не хочет создавать длинные видео, они могли ощутить себя в ущербном положении. Но сейчас все стремятся к минимализму и краткости. Это бросает вызов всей системе, меняет то, как мы взаимодействуем с контентом и, конечно, как он создается. Алина: Да, и это затрагивает не только создателей и их контент, но и нас с тобой, зрителей. Мы все больше привлекаемся к \"легкому\" контенту, который не требует много времени и внимания. Но по иронии судьбы, это также может изменить саму сущность понятия \"контент-креатор\". Андрей: Алина, ты в курсе, что в эпоху высоких затрат на производство, скетч-комедии и анимации испытывают определенные трудности? Создание коротких видео требует больших вложений и написание сценариев под длинные видеоролики не всем под силу. Алина: В самом деле, Андрей. И это не только проблема создателей, но и зрителей. Многие хотят смотреть видео, которые укладываются в короткие перерывы в школе или на работе. Длительное видео не отправишь друзьям для развлечения. Видимо, была зияющая ниша для кратких видеороликов, которую и попытался заполнить Vine. Андрей: Точно, но после ряда ошибок со стороны Vine, на сцену вышел TikTok, который смог всё это взять на себя. Появился в США в 2016 году и к 2019 уже стал титаном социального видеоконтента. Они поняли, что люди хотят короткого, недорогого и легкого для производства контента, который можно легко поделиться. Алина: И самое интересное, Андрей, что история как бы повторяется, не так ли? TikTok заглядывает на территорию, которую YouTube некогда занимал в середине 2000-х. И к 2020 году у TikTok уже были все те крутые треки без проблем с авторскими правами, показатели просмотров, которые казались более впечатляющими, чем на YouTube, и что самое важное – аудитория в возрасте от 13 до 18 лет. Андрей: Это ключевой момент. Знаешь, эта возрастная группа просто магнит для любой социальной платформы. И если ты принадлежишь к этому возрасту, поздравляю: все крупнейшие компании борются за твоё внимание. Это потому, что именно в этом возрасте формируются интересы, которые часто останутся на всю жизнь. Алина: Вот именно. Какой был тот первый любимый фильм, музыкальный исполнитель, любимый аниме? Это все становится частью нас с молодости. И я всегда говорю о том, что стать страстным поклонником чего-либо можно в любой момент жизни. Андрей: Я недавно наткнулся на одно исследование, которое объясняет, почему наши самые запоминающиеся фэндомы возникают в подростковом возрасте. Оказывается, это не просто потому, что в этом возрасте мы все такие впечатлительные. Дело в том, что мозг подростков с 13 до 18 лет активно занимается формированием личности, и это действительно сложная работа. Алина: Верно, Андрей. Подростковый мозг ищет как можно быстрее построить эту личность, и один из путей — это прикрепиться к любимому знаменитости или группе, наслаждаться шоу или следить за любимым создателем контента в интернете. Это словно скелет для будущего \"я\". Андрей: И самое интересное, что фандомы, у которых мы были в возрасте 14-18 лет, зачастую остаются с нами даже после этого периода. Средняя длительность принадлежности к фандому составляет около девяти лет. Алина: Это феноменально, если подумать. Начинай быть поклонником в 14, и ты можешь остаться им до 23 лет. Это именно тот период, когда все социальные платформы и развлекательные франшизы пытаются привлечь тебя, потому что захватив твое внимание в молодости, они захватывают тебя на многие годы активного потребления. Андрей: С точки зрения бизнеса это золото – десять лет лояльности. Это целый век в мире онлайн-видео. Ни удивительно, что борьба за внимание аудитории такая ожесточенная. Андрей: Алина, ты знаешь, YouTube недавно активно пытается скопировать магию TikTok с их короткими видео. Они даже настаивают, что создателям и аудитории стоит активно участвовать в этом формате. Алина: Да, Андрей, мне тоже попадались короткие видео, что весьма увлекательны. Я заметила, что создание такого контента, по крайней мере, даёт больше свободы. Меньше давления, можно расслабиться и затронуть множество тем, до которых в длинных форматах может быть не добраться. Андрей: Верно, но есть и другая сторона медали. Помимо очевидного — что короткие видео приносят меньше денег, не всегда приводят к приросту подписчиков и могут затмить дорогостоящие длинные видео — есть ещё один важный момент. Их наличие на YouTube меняет платформу не способы, которые не всегда выгодны зрителям. Алина: Интересный анализ, Андрей. YouTube становится больше похож на TikTok, но это изменение не только в длине видео. Эти платформы изначально функционируют совершенно по-разному, и когда мы пытаемся превратить одну в другую, происходит много не всегда очевидных изменений. Андрей: Полностью с тобой согласен, Алина. YouTube всегда был по сути поисковой системой, второй после Google. Там хорошо работал контент на основе популярных запросов, например, про фильмы или видеоигры. Ты также мог найти конкретного создателя и все его видео. Но важно, что решение о просмотре зависит от пользователя — ты должен сам выбрать видео с главной страницы или воспользоваться поиском. Алина: Так вот в чем вопрос, верно? Для просмотра видео на YouTube требуется больше активности со стороны зрителя. Надо либо выбрать видео с домашней страницы, либо искать контент самостоятельно, зная что именно тебе интересно. Андрей: Алина, ты размышляла над тем, насколько активное просмотр видео на платформах типа YouTube требует от зрителя участия? Тебе приходится выбирать из списка результатов, нажимать на видео и надеяться, что оно окажется тем, что ты искал. После просмотра одного видео, приходится определяться с следующим, выбрав его из предложенных или воспользоваться функцией автовоспроизведения, хотя честно говоря, кто желает смотреть ещё одну рекламу Skillshare в конце видео? YouTube требует от зрителей активных действий, на самом деле это подчас непросто. Алина: Совершенно верно, Андрей. В сравнении с TikTok, где вся активность заканчивается как только ты открываешь приложение. Всё, что от тебя требуется после этого — это легкое движение пальцем, чтобы перейти к следующему видео, которое алгоритм TikTok уже подобрал за тебя. Это пример пассивного просмотра: TikTok не заставляет тебя выбирать, что смотреть, он предлагает видео, которое ты можешь либо лайкнуть, либо пропустить. Конечно, ты можешь воспользоваться поиском, но это не самый удобный процесс и он всего лишь ведет к другому пассивному листанию. Андрей: Поэтому интересно, что происходит, когда YouTube вводит Shorts — пассивный опыт просмотра внутри активной платформы. Это сложно совмещать, так как переход от одного к другому кажется резким и дизайн явно не продуман до конца. Если я захочу переключиться с Шортов, мне придется вернуться на главную страницу и начать всё сначала. Алина: Да, это влияет на восприятие контента. Когда мы погружены в пассивное просмотр, мы все еще смотрим видео, но теряем контекст вокруг него. Это не просто о дизайне, но и о том, как платформы поощряют взаимодействие с контентом. В пассивном просмотре нас ведет алгоритм, в активном — мы сами принимаем решения о том, что смотреть дальше, и это дает нам возможность глубже соединяться с контентом и его создателями. Андрей: Алина, подумай только, эта история, которую я слышал от коллег по работе, кристально показывает, почему YouTube продолжает оставаться на вершине уже десятилетие. Команда Theorist недавно наняла продюсера социальных сетей, и в процессе собеседований перед ними стояла задача — назвать несколько аккаунтов в TikTok, о которых мы могли бы не знать. Алина: И это так показательно, не правда ли? Ведь эти вопросы раскрывают глубину их понимания платформы. В случае с YouTube, каждый кандидат всегда с лёгкостью мог назвать несколько каналов, которые их впечатляли, и так я, к примеру, узнала о дизайне от Juxtapose и о желе из майонеза от Liam Thompson. Андрей: Но вот когда речь заходит о TikTok, даже самые сильные кандидаты впадали в ступор. Они могли пересказать содержание видео, но вот запомнить, кто его создал... Это было сложнее. Будто какая-то странная цифровая амнезия. Алина: Да, и я заметила, как люди говорят: \"Я должен показать тебе этот TikTok\" или \"Ты видел, как тот парень делает то-то и то-то?\" Но имена создателей ускользают. Это не они пытаются игнорировать авторов, это платформа TikTok как бы подталкивает их прочь от создателей. Андрей: совершенно верно. Имя автора скрыто, маленькое, в уголке экрана. Нам известны создатели на YouTube потому, что мы сами их ищем, выбираем с главной страницы или из предложений. TikTok же работает иначе, это как прокрутка ленты без лиц. Андрей: Так, разбираемся в чем тут дело — YouTube и их концепция страниц каналов. Это фактически делает их превосходным веб-хостом, где каждый создатель контента подобен собственному сайту с уникальной атмосферой. Каждый баннер, эскиз, заголовок — это часть их бренда, и это создаёт определенное взаимодействие между ними и их аудиторией. Алина: Справедливо отметить, что как только эти элементы исчезают, например в ленте Shorts или на TikTok, появляется проблема — потеря идентификации создателей. Там тренды часто не связаны с именами создателей, а следуют за анонимными форматами. Запомнить кого-то на TikTok — задача не из лёгких. Андрей: Это важно, потому что имена создателей на YouTube остаются в памяти. Например, кто создал зубную пасту слона? Марк Робер, а кто славится раздаванием денег? MrBeast. Но на TikTok, всё устроено иначе, основа там — тренды и мемные шаблоны, а не личности. Алина: И знаешь, это серьёзно меняет всё. Пример с VidCon выставкой, где в предыдущие годы очереди за автографами у звёзд YouTube были огромные, а вот когда пришла очередь TikToker'ов с миллионами подписчиков, линии оказались практически пусты. Это говорит о том, что платформа и способы взаимодействия с контентом имеют огромное значение для узнаваемости и связи с аудиторией. Андрей: Ну и история с этими инфлюенсерами на VidCon, Алина. Видно, как TikTok меняет игру. Многие с подписчиками в полмиллиона, миллион, остались без очередей. Кажется легкость набора подписчиков на TikTok не говорит о настоящем фандоме. Алина: Верно, Андрей. Кажется, реальное сообщество и приверженность поклонников стали редкостью. ВКонтакте сейчас пытается вернуть себе молодёжную аудиторию, которая ушла на TikTok, но это может обойтись дорого. Андрей: Мы уже затрагивали тему подростковой аудитории, помнишь, Алина? Они стоят на пороге формирования привязанности к платформам и креаторам. Но если платформа не поощряет развитие таких фандомов, то создатели контента остаются без внимания. Алина: И это приводит к тому, что люди становятся фанатами не креаторов, а самой платформы, или, что ещё хуже, алгоритма. Это звучит странно, когда ты говоришь: \"Я фанат ВКонтакте\". Обычно ты фанат конкретного человека, который творит, вносит что-то уникальное. Андрей: Абсолютно согласен. Я лично восхищаюсь работами таких людей, как Макс Фош или Моист Критикал. И это люди, которые, как тебе кажется, действительно ценят то, что они делают. А быть фанатом алгоритма... это как быть фанатом корпоративной бизнес-модели. Алина: Да, и это может привести к потере индивидуальности и творчества среди контент-мейкеров. Как только перестаёшь ассоциировать контент с реальными людьми, ты переходишь к бездумному потреблению ленты. И тогда вопрос: что будем делать как общество и индустрия, чтобы сохранить эту индивидуальность в креаторах? Андрей: Алина, обсуждали ли мы когда-нибудь наше отношение к TikTok? Я заметил, что многие из наших знакомых программистов и даже сами кандидаты на работу говорят, что они \"фанаты\" платформы, но при этом признают себя \"зависимыми\". Опасное смешение понятий, не находишь? Алина: Ты прав, Андрей. Это действительно беспокоит. Люди часто не различают между тем, что их привлекает в продукте, и тем, от чего они по факту зависимы. И эта зависимость от платформ как TikTok может иметь серьезные последствия для их психического здоровья. Андрей: И вот тут-то и кроется проблема. Когда пользователи путают преданность платформе с зависимостью от неё, это делает их уязвимыми. Видимо, такие платформы используют психологические трюки, чтобы крепче держать их. Алина: А ты видел наш последний подкаст о том, как мозг реагирует на бесконецную прокрутку контента в TikTok? Там обсуждаются те самые механизмы зависимости, которые срабатывают каждый раз, когда мы видим что-то новое и интересное. Андрей: Да, это породило интересный разговор о том, как ВКонтакте использует функцию под названием Шорты для атаки на основной формат TikTok. Ведь им нужно привлечь новую аудиторию для долгосрочного выживания платформы, особенно подростков. Алина: И это стратегия, хоть и понятная, но здесь есть опасность. Если ВКонтакте развивает шорты только для краткосрочного успеха, всем нам стоит задуматься о долгосрочной лояльности идейного сообщества. Их борьба за демографию молодёжи, конечно, понятна, но цена этой битвы может быть велика. Андрей: Наши коллеги обсуждали недавно модель распространения контента на YouTube и ее схожесть с TikTok, особенно функцию, аналогичную странице \"For You\". Похоже, YouTube нацеливается на привлечение новой аудитории и создание привычки просмотра. Алина: Да, Андрей, и это кажется выгодным на первый взгляд. Крупные платформы часто страдают от проблем, связанных с контент-мейкерами – их действия не всегда соответствуют ожиданиям сообщества, они могут уйти на перерыв или полностью исчезнуть. В отличие от создателей, бесконечная лента контента кажется вечной. Андрей: Но взгляды на такую бесконечную скроллинг-ленту могут быть обманчивы. В конце концов, люди не строят отношений с пассивным потоком контента, они становятся его зависимыми. И для долгосрочного здоровья как платформ, так и пользователей это не очень хороший сигнал. Алина: Самое ценное в YouTube – это отношения между создателями и зрителями, способность формировать крепкие сообщества. Это нечто, что ты помнишь и где чувствуешь принадлежность. Такое на долго остается в памяти. Андрей: Вот именно, Алина. И стоит искать тот контент и ту платформу, где каждый может найти что-то свое, что будет значимо именно для него. Если мы, как создатели, можем участвовать в этом процессе, поддерживая и помогая расти нашим сообществам - это здорово. И крайне ценно, если кто-то нашел это с нами и нашим подкастом. Андрей: Алина, знаешь, я размышлял об этом новом направлении YouTube на короткие видео – YouTube Shorts, которые стали особенно популярны в 2024 году. Пользователям кажется не нравятся эти изменения, и мне интересно твое мнение по этому поводу. Алина: О, да, Андрей, это действительно заметное явление. Как коуч, я могу сказать, что отрицательная реакция может быть связана с несколькими факторами. Во-первых, это обратная связь – люди используют кнопку \"не нравится\", если контент им не понравился или не оправдал ожиданий. Андрей: Верно, и есть еще тема алгоритмов. Продвинутые пользователи пытаются влиять на контент, который они видят, через алгоритм, нажимая \"не нравится\" на видео, которые им не интересны. Алина: А еще не стоит забывать о троллинге. К сожалению, в интернете всегда найдутся люди, которые готовы ставить лайки или дизлайки просто для развлечения, или из-за антипатии к тем или иным авторам. Андрей: Да, это бывает. И иногда нажатие на \"не нравится\" случается просто случайно, ведь эту кнопку легко перепутать с кнопкой \"нравится\", особенно на мобильных устройствах. Алина: YouTube Shorts, во многом напоминают контент на TikTok, и те, кто предпочитает YouTube для просмотра более длинных видео, могут проявлять сопротивление этим коротким видео, что тоже влияет на количество дизлайков. Андрей: Авторам, с другой стороны, стоит сконцентрироваться на создании ценного контента, который будет откликаться у их аудитории, избегать ненужных споров, делать видео более личным и использовать аналитические инструменты YouTube для понимания предпочтений и поведения зрителей. Алина: Важно помнить, что дизлайки – это тоже участие в жизни канала и могут служить ценной обратной связью для создателей. Кажется, что это отрицательная реакция, но на самом деле она может помочь в корректировке стратегии контента. Андрей: Алина, тут задумывался о влиянии YouTube Shorts на маркетинг видеоигр и вот к чему пришёл – штука мощная. Сначала, понятное дело, огромнейшая аудитория YouTube. Теперь и Shorts может в этом потенциале поучаствовать, привлекая потенциальных геймеров. Алина: И не говори, Андрей. Формат коротких роликов прямо как создан для этого – зацепить зрителя за считанные секунды. Игровые моменты, тизеры, обновления – все это можно лаконично и заманчиво показать. Андрей: К тому же, у этих Shorts есть шансы стать вирусными. Представляешь, какой это может дать толчок популярности игры, если ролик \"выстрелит\"? Алина: Точно. Маркетологи смогут через платформы делиться этими короткими роликами, расширяя своё влияние. Это ещё и строит сообщество вокруг игры, создаёт преданность и вовлеченность. Андрей: Ещё нельзя забывать про монетизацию. Shorts открывает перед разработчиками и маркетологами новые возможности сотрудничества с брендами, аффилированными программами и другие пути дохода. Алина: А учитывая, что YouTube – прямо таки поисковая система №2, не удивлюсь, если правильно оптимизированный контент в Shorts улучшит видимость игры в поиске. И аналитика! YouTube даёт обратную связь, а это золото для любого, кто хочет совершенствовать свои маркетинговые стратегии. Андрей: В общем, да, безусловно, YouTube Shorts – сильный инструмент в арсенале маркетинга игр. Сочетание огромного охвата, увлекательного формата, вирусного потенциала и ценного анализа… Это всё может серьёзно помочь в продвижении игры. Андрей: Знаешь, Алина, я задумался о том, как мы можем адаптировать контент для различных платформ и аудитории. Мне кажется ключевым моментом является создание захватывающих и одновременно информативных коротких видео, которые будут откликаться у сообщества геймеров. Алина: Абсолютно с тобой соглашусь, Андрей. Это же не просто о трансляции информации, это о создании чего-то, что действительно зацепит и увлечёт аудиторию. Есть же такое множество потенциала в коротком формате, и наша задача - раскрыть его так, чтобы он гармонировал с интересами игрового сообщества. Андрей: Ну а теперь давайте поговорим о YouTube Shorts. Это же как тот полнейший хаос в кармане каждого. Ты тянешь из кармана телефон в поисках полезного видео, а вместо этого ловишь пятнадцать секунд собаки-скейтбордиста. Есть, конечно, своя милая сторона вещей, но мне кажется многие скучают по временам, когда видео было хотя бы длиннее их терпения. Алина: Ага, и каждый раз заходишь за дозой информации, а уходишь с головной болью от перепадов музыки и кадров. Это как калейдоскоп для тех, кому лень было его вращать. Шуток в сторону, но интересно, как будет меняться восприятие контента, когда мозг научится переключаться между историями быстрее, чем я могу сказать \"Shorts\". Андрей: На самом деле, такая тяга к короткому видео показывает тренды нашего времени. Скорость, доступность, сжатость информации. На это стоит обратить внимание разработчикам игр – возможно, им стоит поучиться у короткометражек создавать мгновенный хук для игроков. Алина: Верно, Андрей. Хотя иногда мне кажется, что подобный формат способствует уменьшению внимательности и концентрации. С одной стороны это вызов, но с другой – возможность для игроделов по-новому подойти к структуре игрового процесса и наградам в игре. Андрей: Поэтому, несмотря на все общее недовольство, нельзя отрицать влияние YouTube Shorts на культуру визуального контента. Явно есть здесь что-то притягательное для аудитории, так что давайте продолжать наблюдать за тенденциями. Алина: И спасибо вам, дорогие слушатели, что вместе с нами разбирались в этом коротком, но бурном мире YouTube Shorts. Благодарим за ваши комментарии и мнения, которые вы делитесь. Не забывайте подписываться на наш подкаст и обсудить все это со своими друзьями и коллегами. Андрей: А за сегодня мы прощаемся. Большое спасибо ВКонтакте за поддержку и, конечно, огромная благодарность создателям подкаста ДУМФЭЙС за возможность обсуждать злободневные и интересные темы. Следите за обновлениями, будем рады видеть вас среди наших слушателей в следующих выпусках. Удачи и до новых встреч! Web: https://d00m4ace.com/ GitHub: https://github.com/d00m4ace/ YouTube: https://www.youtube.com/c/@d00m4ace Telegram: https://t.me/d00m4ace_blog ← Предыдущая статья: D00M4ACE подкаст 3 Прогноз на 2024 год в области искусственного интеллекта и разработки видеоигр → Следующая статья: Как сделать свой GPT в ChatGPT Copyright d00m4ace © 2024", "url": "/posts\\d00m4ace-podkast-4-pochemu-vse-nenavidjat-youtube-shorts\\"}, {"title": "D00M4ACE подкаст 5 Хорошая графика не имеет значения в видеоиграх", "body": "D00M4ACE подкаст 5 Хорошая графика не имеет значения в видеоиграх Блог Проекты Тэги Заметки Search D00M4ACE подкаст 5 Хорошая графика не имеет значения в видеоиграх #35 суббота, 6 января 2024 г. 36 минут(ы) 3475 слов #Podcast #GameDev #Graphics #Good В этом выпуске подкаста ДУМФЭЙС ведущие Андрей и Алина обсуждают значение графики в видеоиграх. Они спорят о том, является ли передовая графика залогом успеха игры или важнее другие элементы, такие как геймплей, сюжет и художественный стиль. Они размышляют о различных играх, сравнивая вечную привлекательность простой графики с быстро развивающимися технологическими стандартами в индустрии. В беседе обсуждаются эволюция графики, влияние художественного направления и баланс между графической достоверностью и игровым процессом. Транскрипция подкаста: Андрей: Привет всем слушателям подкаста ДУМФЭЙС, сегодня у нас на повестке дня бесконечное обсуждение \"Хорошая графика в играх, важна ли она на самом деле\"? Начну, пожалуй, с классики – когда мы смотрим на игры, вроде \"Тетрис\" или \"Легенда о Зельде\", очевидно, что в своё время они не выдавались графическими новаторами, но это вовсе не помешало им завоевывать сердца миллионов. Геймплей, сюжет – вот что держало нас за экранами часами. Алина: И это ведёт нас к мысли о том, что художественный стиль имеет не меньшее значение. Возьмём, к примеру, \"Okami\" или \"Wind Waker\" – у этих игр своя неповторимая аура и стиль, который не устареет, ведь он не привязан к хай-энд графике. К тому же, думаю, упрощенная графика делает игру доступной для большего числа игроков, ведь не у всех есть мощные игровые системы. Андрей: Очень верно, Алина. И не стоит забывать о творческих возможностях, которые открываются перед разработчиками, когда они не ограничены поиском графического совершенства. Это всегда призыв к инновациям в геймплее и повествовании. Алина: Есть ещё и ностальгия, Андрей. Множество игроков любят ретро-стиль, пиксель-арт, и зачастую эти чувства намного важнее, чем любое количество полигонов на экране. И, конечно же, игры, упрощенные графически, часто работают стабильнее, предоставляя игрокам более гладкий и менее раздражающий игровой процесс. Андрей: Совершенно верно. В итоге, все эти дебаты о графике – вопрос вкуса и предпочтений каждого отдельного игрока. Но интересно, что часто игры с более простой графикой заставляют нас ценить искусство игрового дизайна вне зависимости от количества пикселей на экране. Андрей: В плане графики всегда были определенные ожидания, но интересно наблюдать, как на протяжении лет некоторые игры все еще выглядят лучше, чем новинки. Ты помнишь, какие скачки качества мы видели с начала 2000-х? Потрясающее было время! Алина: Абсолютно согласна, Андрей. Мы часто обсуждаем последние графические обновления, но даже старые кинематографические трейлеры от Blizzard были просто захватывающими. И выходит, что с возрастанием наших ожиданий, изменения в графике уже не производят такого же впечатления. Андрей: Именно, последние десять лет улучшения в графике стали гораздо менее значимы. Я смотрю на игры 2023 года и вижу, что многие из них не выглядят лучше, чем игры вышедшие в 2013. Иногда кажется, что реальные улучшения заметны только при придирчивом изучении текстур. Алина: И в этом есть доля правды. Казалось бы, графика достигла определенного уровня в 2010 году и с тех пор, несмотря на постоянный прогресс, улучшения стали заметны лишь в нюансах. Да, у нас есть Unreal Engine 5, который определенно лучше, но эти изменения уже не настолько революционны. Андрей: Это доказывает тот факт, что хорошая графика – это не всё. Геймплей, история, художественный стиль и множество других аспектов имеют гораздо большее значение, чем только визуальная составляющая игры. Алина: Точно, Андрей. Графика может привлечь внимание, но именно разнообразие геймплея, доступность и креативность решают, насколько игра окажется успешной и приятной для пользователя, и это что-то, что мы не должны забывать. Андрей: Знаешь, я недавно возвращался к играм начала 2010-х, например, Dishonored и Bioshock Infinite, и они выглядят на удивление современно, даже спустя десять лет. Видимо, не всегда последние технологии определяют визуальную привлекательность игры. Алина: Ты абсолютно прав, Андрей. Большое дело в стиле. Вспомни, хоть и графика в серии Souls может быть не такой детализированной, но их стиль создает неповторимую атмосферу. Берем Bloodborne — визуально игра выглядит ужасно, особенно по качеству текстур, но она запоминается именно благодаря своему уникальному стилю. Андрей: Это точно, стиль имеет значение. Новейшие инструменты разработки способны на впечатляющие результаты в умелых руках, но когда дело доходит до многих недавних игр, технологии затмеваются поверхностной и безликой визуализацией. Возьмем, к примеру, Forspoken: технически графика превосходная, но из-за своей безличности и перенасыщенности оказывается, мягко говоря, не лучшим примером. Алина: Да, и это напоминает мне об искусстве создания мира в играх. Даже если разработчики вкладывают серьезные усилия в создание ассетов, эта работа порой не ощущается, если мир игры не кажется уникальным и детально проработанным. Важно, чтобы игра имела свой характер, тогда она запоминается и вызывает отклик у игроков. Андрей: Современные игры иногда перегружены визуально. Возьмем, например, одну последнюю игру, где из-за графического и художественного стиля теряется видимость, что делает геймплей сумбурным. Алина: Да, я с тобой совершенно согласна. Реалистичная графика, возможно, и привлекает более широкую аудиторию, но уникальный стиль и низкополигональная графика часто выгодно выделяют игру. Ведь если взглянуть на такие хиты как Minecraft и Fortnite, становится ясно, что уникальный визуальный стиль куда важнее для успеха. Андрей: Точно, это не просто движок, это то, как разработчики его используют. Sea of Thieves - прекрасный пример использования сильных сторон Unreal Engine, но при этом игра сохраняет свой неповторимый стиль. Не виним движок, если игра выглядит стандартно. Алина: Мы знаем, что Атомное сердце не зацепило многих именно из-за этого \"мусорного\" визуального стиля. А вот Firewatch, сделанный на Unity Engine, показывает, как визуальное наслаждение не обязательно должно быть тройным А графикой. Андрей: Полностью разделяю это мнение. Графика уже не играет такой роли, как раньше. Мы достигли той точки, где развитие графических технологий замедлилось, и теперь больше ценится художественный стиль, а не чисто техническая сторона картинки. Алина: Сравнивать графику с посыпкой на кексе очень кстати. Они могут привлечь внимание и заставить выбрать именно этот кекс, но посыпка не делает его вкуснее. И конечно, не из-за неё мы его покупаем. Именно художественный стиль, образ игры, кажется, имеет гораздо большее значение. Андрей: Арт-стайл и индивидуальный подход - вот что помогает играм выделиться среди конкурентов и привлечь внимание. И это очень важно в текущем состоянии индустрии. Андрей: Алёна, ты замечаешь, как графика в играх все улучшается и улучшается? Но ведь поворотные моменты вроде перехода от Super Nintendo к Nintendo 64, а потом к GameCube были просто гигантскими шагами. Алина: Да, Андрей, это действительно так. А теперь взгляни на Unreal Engine 5 и представленные демки – они настолько фотореалистичны, что просто поражают воображение. Помнишь эту игру, где использовалась полицейская камера-бодикам, которая вызвала волну негодования, потому что люди подумали, что это настоящие кадры? Андрей: Именно, это показывает, насколько сильно графика может впечатлить. Но не все хотят играть в исключительно фотореалистичные игры. Интересно, что игры, выпущенные 10-15 лет назад, по-прежнему актуальны и популярны. Алина: Это верно. Примеры таких игр, как Rage, Stalker или даже World of Warcraft, доказывают, что хороший дизайн и концепция могут оставаться вне времени. Это же касается и стиля, как в Fable или Dragon Age. Андрей: Ты помнишь недавний спор вокруг Elden Ring и утверждений, что у игры плохая графика? Честно говоря, если приглядеться к некоторым текстурам в Elden Ring, они действительно могут показаться ниже среднего для игр класса AAA. Но на деле это не важно, потому что игроки ценят не это. Алина: Именно так, они ищут незабываемые ощущения и геймплей. Понимаешь, эти моменты, конечно, имеют значение, но они не должны быть в центре внимания. Многие современные блокбастеры, к сожалению, слишком сосредоточены на несущественных деталях и часто упускают из виду то, что действительно интересно настоящим геймерам. Андрей: Алина, ты не находишь, что сейчас у нас повсюду наблюдается взрывная популярность игр AA и инди, которые по производительности превосходят AAA проекты? И при этом графика у них далеко не на уровне этих гигантов. Алина: Да, Андрей, мне кажется это доказывает, что есть что-то глубже одних только графических показателей. В некоторых играх последней воды и декораций лучше качество, но это совсем не важно, если стиль игры захватывает. Андрей: Ты права, и хотя если приглядеться к деталям, как, например, оружию в Moonlight Blade, то можно увидеть, что многие AAA студии могут предложить гораздо более высокое качество. Но в конечном счете, это не имеет значения. Алина: Именно, Андрей. Многие слишком увлечены играми с хорошей графикой, что забывают о разнице между графикой и художественным стилем. Графическое качество может быть не высоким, но если художественный стиль на высоте, это преобразует игру. Андрей: Так точно. Я бы выбрал сто игр со стилем на уровне FromSoft прежде чем еще одну Atomic Hearts или Immortals of Avium. И хочу повторить то, что я говорил ранее: вопрос не в том, чтобы выбрать что-то одно, игра может и должна сочетать в себе и выдающуюся графику, и впечатляющий художественный стиль. Алина: Абсолютно. Игры, которые сочетают и то, и другое, остаются в памяти на долго, такие как Halo 1, Half-Life 2, оригинальная World of Warcraft, Warcraft 3, Bioshock. Искусство и графика действительно могут сосуществовать. Андрей: Алина, ты вспоминаешь первые игры типа Fallout или Skyrim? Как они в своё время впечатляли. Алина: Конечно, Андрей. И до сих пор Witcher 3 задает стандарты. Но сейчас ещё больше внимания уделяется не только графике, но и видимости. Взгляни на Bioshock и Dishonored, или даже на Doom 2016 и Eternal. Андрей: Абсолютно с тобой согласен. Кстати, о Doom Eternal, знаешь ли ты, что освещение врагов там настроено отдельно от среды? Это позволяет их лучше видеть, даже в темных зонах. Алина: А вот и прекрасный пример того, как геймплей ставится на первое место. Из-за этого игра может выглядеть менее кинематографичной, но играться гораздо удобнее. Андрей: Разработчики Eternal во время тестов обнаружили, что окружающее освещение из 2016 версии создавало проблемы с видимостью, особенно в более жесткой и быстрой игре. Алина: Это показывает, насколько важна видимость в играх. Я всегда чувствовала, что в Apex Legends видимость оставляет желать лучше. И это проблема не только у Immortals. Андрей: Точно, я тоже сталкивался с проблемами в Apex, а в Warzone такого не было. И это ведь не только вопрос игры на ПК и размера монитора, но и дизайна самой игры. Андрей: Знаешь, Алина, порой в играх так сложно увидеть врага, который прямо перед тобой. Все как-то сливается со всем. Алина: Да, я тоже это заметила. Иногда вопрос реализма в играх приводит к тому, что заметить противника становится сложнее, особенно в симуляторах боевых действий. Андрей: Согласен, реализм — это одно, но в реальной жизни мы видим мир иначе, чем на экране. Углублений, оттенков, мелких деталей — все это в игре на экране мы воспринимаем по-другому. Алина: Абсолютно верно, ведь наш взгляд способен зафиксировать гораздо больше деталей в реальности. В играх, на 2D экране, мы этого лишены из-за отсутствия глубины перспективы. Андрей: Помню, в играх периода с 2008 по 2012 год было проще отличить персонажей от фона: текстуры были немного хуже, но модели персонажей ярко выделялись. Это было даже ближе к реальности, потому что наши глаза легче выделяли врага на таком фоне, особенно на расстоянии. Алина: И знаешь, что интересно? Часто профессиональные игроки в соревновательных шутерах специально уменьшают качество графики, чтобы улучшить видимость и получить преимущество. Иногда это делается даже для увеличения FPS — кадров в секунду. Андрей: Знаешь, Алина, игра Battle.Bit, хоть и выглядит очень просто, но она избавляется от всего не нужного, как лишние \"листья\" визуального ряда. Это невероятно важно, потому что видимость в дальних боях резко возрастает, и вот это что-то, что было утрачено в многих современных играх. Почему-то многие забывают, как важно видеть противника издалека. Алина: Игры действительно стали намного насыщеннее в плане графики, но иногда это мешает геймплею. Вспоминая классику, как Bad Company 2, там важна была геймплейная чистота. И ты прав, Андрей, PUBG действительно занимает особое место по части баллистики на средние и дальние дистанции. Андрей: О, и упомянем ремейк Demon's Souls для PS5. Он буквально перевернул мое представление о ремастерах, особенно после довольно провального Warcraft 3 Reforged. Но интересно, что с точки зрения атмосферы и художественного видения оригинальная Demon's Souls оставила более глубокий отпечаток. Алина: Это точно. Скажем так, Elden Ring может и уступать в графическом плане ремейку Demon's Souls, но благодаря своему сильному художественному стилю, игра выглядит гораздо богаче. Дизайн, окружение, визуальная история - всё это оказывает огромное влияние на восприятие игр. Андрей: И вот еще интересный момент о серии Destiny. Возвращаясь к предыдущему разговору, можно заметить, что многие моменты в Destiny 1 выглядят лучше, чем в Destiny 2. Это подтверждает, что графический прорыв не всегда решает. Андрей: Ну, есть такая проблема с Destiny 2 по сравнению с предшественником - изображение персонажей и окружения выглядит более пластичным, что-то не то с освещением. Алина: В точку, Андрей. Хотя и не отрицаю, что Destiny 2 имеют свои зрелищные моменты. Но когда начинаешь сравнивать локации в обеих играх, становится очевидным, что во второй части детализация сильно упала. Андрей: Именно. Возьмём, к примеру, Космодром или Луну – в некоторых местах картинка выглядит явно хуже. И даже переработанные рейды, как King's Fall, лишились тех прекрасных теней и цветов из оригинала, детализации не хватает. Алина: Знаешь, мне всегда нравились игры, которые используют почти мультяшную атмосферу. Вспомни Overwatch и его Pixar-подобный стиль. И это, кстати, прекрасный пример. Андрей: Ага, Overwatch действительно выделяется. Есть ещё такие как Kingdoms of Amalur или игры серии Fable, или даже Alice Madness Returns. Они отлично сохраняют актуальность своего графического стиля и не кажутся устаревшими. Алина: С другой стороны, есть игры, в которых и стиль, и графика оставляют желать лучшего. Возьмём, к примеру, Pokemon Scarlet и Violet. Тут их визуализация, и артистическая составляющая, если честно, выглядят ужасно. И дело не в Switch, потому что Sword и Shield выглядят намного лучше на этой же консоли. Андрей: Знаешь, я с Pokemon закончил ещё в 2006, когда в среднюю школу перешёл. Так что не могу сказать, как игры серии выглядят сейчас. Алина: Это сбивает с толку и печально, потому что если взять Xenoblade Chronicles 3, который тоже для Switch, он выглядит довольно прилично на этой консоле. Я ожидала, что визуальная составляющая Pokemon будет хотя бы в этом направлении развиваться. Андрей: Да, но в конце концов, это Nintendo. Так что возможностей у Switch примерно как у Xbox 360, и это тоже стоит учитывать. Андрей: Так, знаешь, это всегда заставляет меня задуматься, когда студии пытаются привлечь внимание к своей игре, рассказывая о кинематографичности или фотореалистичности графики. Честно, довольно часто в такие моменты я просто отключаюсь. Почему в индустрии так много внимания уделяется стараниям сделать игры реалистичными, забывая при этом, что в играх важнее всего геймплей и арт-дирекция? Алина: Ты абсолютно прав, Андрей. Меня тоже не волнует насколько детализированными будут волосы персонажа, если это не влияет на главное - игровой процесс. Иногда кажется, что эти детали в графике привлекают покупателей, но не обязательно заставляют их играть. Как говорят, каждый раз, когда разработчик гордится кинематографичностью своей игры, где-то на небесах ангел теряет крылья. Андрей: Да, более важным является ощущение реалистичности мира, отражённого через ясную и согласованную арт-дирекцию, а также строение мира через экологическое повествование. Многие путают реалистичность графики с погружением в игру, но, на мой взгляд, это не самое главное. Алина: Полностью согласна с тобой, хорошая графика может упростить погружение в игру, но чувство ухода от реальности делает это ещё более сильным. Например, мне кажется сложным погрузиться в игру типа Starfield из-за плохо проработанных персонажей. Lost Ark тоже столкнулся с аналогичной проблемой. Это проектировали в Unreal Engine 3, а выглядит это... ну, не очень. Каждый раз, когда камера делает крупный план на лицо персонажа, у меня перед глазами всё сжимается. Андрей: И это именно вопрос веры – когда визуал, звуковое оформление, музыка и тон игры сочетаются, это и создаёт нужное погружение. Если все этти элементы гармонируют, то именно это и нужно для полноценного погружения в игру. Андрей: Алина, взглянув снова на Atomic Heart, я не могу не заметить, что, несмотря на визуально впечатляющую графику,общий тон игры и её арт-дирекция кажутся довольно заурядными. И это отбрасывает её на фон с таким сильным проектом, как Bioshock. Алина: Да, ты прав, Андрей. Культурный контекст тоже важен, и кажется, что Atomic Heart черпает вдохновение из советской эпохи, вопрос, насколько это резонирует с аудиторией вне тех регионов. Интересно было бы узнать мнение игроков из России и соседних стран. Андрей: Это точно. Использование Unreal Engine кажется главной \"фишкой\" продаж игры, в то время как сама история, геймплей и атмосфера оставляют желать лучшего. Талантливая команда рулевых могла бы придать игре новый вектор. Иногда, глядя на игры 2014-2015 годов, у меня создается впечатление, что визуальное оформление достигло пика именно тогда. Алина: Ты абсолютно прав. Вспоминая Assassin's Creed Unity, поражаешься, как визуал игры, созданной так давно, все еще впечатляет больше, чем некоторые новые проекты. Даже The Order: 1886, несмотря на достаточно средние отзывы, выглядит просто невероятно хорошо. И да, освещение и теневая работа чрезвычайно важны для создания правильного визуального восприятия. Андрей: Именно, освещение и тени могут полностью изменить восприятие игрового мира. Взять к примеру World of Warcraft — без соответствующего освещения объекты могут выглядеть невзрачно, но как только все настроено, выходит великолепно. Это то, что иногда превосходит даже последние игры на Unreal Engine. Андрей: Знаешь, Алина, мне всё чаще кажется, что первая часть \"Dying Light\" выглядит более впечатляюще, чем ее продолжение. И не только это - если взять \"Far Cry 4\" и сравнить его с \"Far Cry 5\", первый явно более детализированный и живой. Алина: Совершенно верно, Андрей. Это касается и \"Battlefield 1\" по сравнению с \"Battlefield 2042\". Детализация и разрушаемость в первой игре впечатляют куда сильнее. И так часто бывает, что прошлые игры, как \"Infamous Second Son\" или \"Arkham Knight\", до сих пор эстетически превосходят новинки, даже спустя почти десятилетие. Андрей: Ты подметила очень важный момент. Похоже, что высококачественные текстуры и графические технологии сегодня часто компенсируют недостатки в других областях разработки игр. Но даже это не всегда помогает. Ведь видим упрощение и в анимациях, хотя это тема для отдельного разговора. Алина: Интересно, что наиболее эффективным способом рассказывания истории остается энвайронментальный сторителлинг. Мы же с тобой – визуальные существа, Андрей. И чрезмерное количество экспозиции может отпугнуть, хотя неправильно считать диалоги и некоторую экспозицию чем-то плохим. Андрей: Абсолютно с тобой согласен, Алина. Но вот что действительно может раздражать в новых играх, так это бесконечный диалог с персонажами, которые засыпают тебя информацией, не давая никакого контекста или понимания, и это все стирается из памяти, как только диалог заканчивается. Алина: Да, Андрей, и игры, которые позволяют тебе просто играть и постепенно вводят тебя в курс дела, заслуживают уважения. Такие произведения, как \"Firewatch\", почти достигают идеального баланса между визуальным воздействием и текстом. Андрей: Я тоже очень ценю такой подход. И правда странно наблюдать, когда крупные студии делают шаг назад в плане детализации мира и интерактивности. Андрей: Ну вот, Алина, если говорить о Starfield и крупных студиях AAA-класса, у меня возникает вопрос. Как это возможно, что после 6-7 лет разработки, результат выходит подобным? Как такие вещи случаются на таком уровне? Алина: Действительно, Андрей, это выглядит печально. Иногда в игровой индустрии есть персона, аналогичная режиссёру в кино, но в играх все немного иначе. Есть игровые директора, есть дизайнеры, занимающиеся сторибордингом и прочим. Но в целом, дирекция в играх несколько иная. Андрей: Точно. Понимания хватает, чтобы задаться вопросом — куда движется индустрия, когда результаты работы ведущих студий оказываются столь спорными? Такие проколы, как со Starfield, это знак для размышлений. Алина: И верно подмечено относительно графики — не столько количество пикселей важно, сколько общий стиль и визуальное восприятие игры. Старые игры, например, могут казаться привлекательнее за счет более ярко выраженного стиля. Андрей: Есть еще один момент — инновации. Кажется, Bethesda застряла в своих методах и не хочет развиваться, и это видно на примере Starfield. Алина: А вот интересный аспект, Андрей: любви одних к игре не делает ее объективно хорошей, так же как и критика других — плохой. Важно смотреть на геймплей, историю, разнообразие механик. Если NPC выглядят глупо, история затянута и геймплей повторяется, вплоть до однообразного вооружения, это серьезные вопросы. Андрей: Хорошая точка зрения. Игра может приносить удовольствие, но когда кто-то пытается защитить очевидные недостатки, это выглядит странно. Раз так нравится игра — отлично, но не нужно убеждать всех вокруг, что недостатки это достоинства. Андрей: Знаешь, Алина, иногда мне кажется, что в некоторые игры лучше играть со закрытыми глазами. Это как будто добавляет хардкорности в ретро игры с их пиксельной графикой. Алина: Ахах, Андрей, ну ты и шутник. Но если серьёзно, хорошая графика — это конечно здорово, но душа игры все-таки кроется не в пикселях. Андрей: Ты права. В конце концов, величайшие любовные романы мира написаны на бумаге, а не виртуальной реальности. Видеоигры — это та же история. Сюжет, персонажи, игровой процесс — вот что действительно важно. Алина: Точно! Вспомнить только \"Тетрис\" — безумно простая графика, а увлекает миллионы. Или \"Майнкрафт\", который взорвал мир не своей реалистичностью, а свободой и креативом! Андрей: Ну, и конечно, не забываем про нашу любимую \"Звездную долину\", которая выглядит как из 90-х, но по сути на высоте 5D графики современных игр. Алина: Совершенно верно. Но пошли дальше. Помимо этого, игры с невероятной графикой иногда заставляют забыть о главном — удовольствии от игры. Графика может быть идеальной, но если игра не захватывает, то и наслаждения мало. Андрей: Согласен, когда игра начинает напоминать фильм, где тебе разрешают иногда нажимать кнопки, это уже не то. Алина: Ну что ж, друзья, надеемся, мы смогли развеять некоторые мифы и посмотреть на игры под другим углом. Хорошая графика это приятно, но не самое главное. Андрей: Спасибо всем, кто присоединился к сегодняшнему обсуждению и особенная благодарность создателям подкаста ДУМФЭЙС за эту возможность поделиться нашими мыслями. Следите за тем, как играет ваша душа, а не только за тем, как выглядит ваш экран. Встретимся в новых эпизодах! Web: https://d00m4ace.com/ GitHub: https://github.com/d00m4ace/ YouTube: https://www.youtube.com/c/@d00m4ace Telegram: https://t.me/d00m4ace_blog ← Предыдущая статья: Как сделать свой GPT в ChatGPT Copyright d00m4ace © 2024", "url": "/posts\\d00m4ace-podkast-5-horoshaja-grafika-ne-imeet-znachenija-v-videoigrah\\"}, {"title": "Git и Windows symbolic links (символические ссылки), также известные как symlinks", "body": "Git и Windows symbolic links (символические ссылки), также известные как symlinks Блог Проекты Тэги Заметки Search Git и Windows symbolic links (символические ссылки), также известные как symlinks #11 суббота, 1 июля 2023 г. 10 минут(ы) 877 слов #Git #Windows #symbolic links #symlinks Symbolic links (символические ссылки), также известные как symlinks, - это особый тип файла, который служит ссылкой на другой файл или директорию в файловой системе. В Windows для работы с символическими ссылками используется утилита mklink. Она позволяет создавать символические ссылки и жесткие ссылки. Но для работы с этой утилитой вам потребуются права администратора. Символические ссылки (или symlinks) могут быть очень полезны в различных сценариях при работе с проектами. Вот несколько примеров: Организация проектов: Символические ссылки могут помочь организовать файлы и папки в проекте так, чтобы они были легко доступны. Это особенно полезно, когда одни и те же файлы или папки используются в нескольких проектах. Вместо копирования и вставки файлов между проектами вы можете создать символическую ссылку на нужные файлы/папки. Общий код: Если у вас есть библиотеки или модули, которые используются в нескольких проектах, вы можете поместить их в одно место и создать символические ссылки на них в каждом проекте. Это упрощает обновление и поддержку общего кода. Тестирование и отладка: В некоторых случаях вы можете использовать символические ссылки для тестирования. Например, вы можете заменить файл в проекте символической ссылкой на тестовый файл, не меняя структуру проекта. Работа с системами контроля версий: Символические ссылки могут быть полезны при работе с системами контроля версий, такими как Git. Например, в Git есть возможность создания git-ссылок, которые являются специальным типом символических ссылок. Производительность и экономия места: Символические ссылки могут помочь сэкономить место на диске и улучшить производительность, так как они позволяют избежать дублирования файлов и папок. Помните, что работа с символическими ссылками требует понимания их особенностей и осторожности, поскольку неправильное их использование может привести к неожиданным последствиям. Вот как вы можете использовать mklink: Откройте командную строку с правами администратора (нажмите правой кнопкой мыши на иконке командной строки и выберите \"Запустить от имени администратора\").\nДля создания символической ссылки на файл, используйте следующую команду: Copy Code mklink Link Target Здесь Link - это имя вашей символической ссылки, а Target - это путь к целевому файлу. Для создания символической ссылки на директорию, используйте следующую команду: Copy Code mklink /D Link Target Здесь флаг /D указывает на то, что ссылка должна быть создана на директорию. Если вам необходимо создать жесткую ссылку, используйте флаг /H: Copy Code mklink /H Link Target Помните, что жесткие ссылки могут быть созданы только для файлов, а не для директорий. Для создания ссылки, которая может пересекать сетевые пути, используйте флаг /J: Copy Code mklink /J Link Target Учтите, что ссылки созданные с флагом /J являются символическими ссылками на директорию, но ведут себя как жесткие ссылки. Как использовать относительный путь к целевой директории Символические ссылки с относительными путями могут быть особенно полезными в нескольких случаях: Переносимость: Когда вы перемещаете или копируете структуру каталогов, содержащую символические ссылки с относительными путями, ссылки продолжают работать, поскольку они указывают на путь относительно их текущего местоположения, а не на абсолютный путь в файловой системе. Структура проекта: В проектах, где важна структура каталогов, например, в больших кодовых базах или в сложно структурированных проектах, символические ссылки с относительными путями могут помочь организовать и визуализировать связи между различными компонентами. Общие ресурсы: Они также полезны, когда несколько проектов или частей проекта используют общие ресурсы. Символическая ссылка с относительным путем может указывать на общий файл или каталог, позволяя его легко обновлять или изменять без необходимости менять все ссылки на него. Однако стоит помнить, что не все системы и инструменты одинаково хорошо поддерживают символические ссылки. Например, некоторые системы контроля версий, такие как Git, не отслеживают символические ссылки как ссылки по умолчанию, а отслеживают их как обычные файлы. Это может привести к неожиданным результатам, если не обрабатывается должным образом. Copy Code # c:\\some_dir\\some_dir2\\code\\ - наш общий для всех проектов код\ncd c:\\some_dir\\some_dir2\\some_dir3\\project_x_dir\nmklink /d code ..\\..\\code Команда mklink /D code ....\\code в Windows создает символическую ссылку на директорию. Здесь: /D — ключ, указывающий, что создается символическая ссылка на директорию, а не на файл. code — имя новой символической ссылки, которую вы создаете. ..\\..\\code — это относительный путь к целевой директории, на которую указывает символическая ссылка. В данном случае, символическая ссылка будет указывать на директорию code, которая находится на два уровня выше текущей директории. В результате выполнения этой команды, в текущей директории будет создана символическая ссылка code, которая будет указывать на директорию ..\\..\\code . Важно отметить, что для создания символической ссылки в Windows вам нужны права администратора. Если у вас нет этих прав, то вам нужно открыть командную строку или PowerShell \"от имени администратора\". Как символические ссылки использовать в Git В Git, символические ссылки (symlinks) не отслеживаются как ссылки по умолчанию. Однако, вы можете изменить настройки Git, чтобы он мог отслеживать символические ссылки как ссылки. Откройте командную строку (терминал) и перейдите в каталог вашего репозитория Git. Введите следующую команду для включения отслеживания символических ссылок: Copy Code git config core.symlinks true Эта команда включает отслеживание символических ссылок в текущем репозитории. Если вы хотите включить эту функцию для всех репозиториев, используйте флаг --global , как показано ниже: Copy Code git config --global core.symlinks true Помните, что поведение символических ссылок может отличаться в разных операционных системах. Например, в Windows для создания символических ссылок требуются административные привилегии. Кроме того, некоторые файловые системы не поддерживают символические ссылки. Важно также учесть, что даже с включенным отслеживанием символических ссылок, Git будет отслеживать их как ссылки, а не содержимое целевых файлов или каталогов. Это означает, что если целевой файл изменяется, Git не будет отслеживать эти изменения через символическую ссылку. ← Предыдущая статья: Удаление директории из Git → Следующая статья: Открытие портов и перенаправление их на определенный компьютер в вашей домашней сети Copyright d00m4ace © 2024", "url": "/posts\\git-i-windows-symbolic-links-simvolicheskie-ssylki-takzhe-izvestnye-kak-symlinks\\"}, {"title": "Git игнорирование определенных файлов и директорий", "body": "Git игнорирование определенных файлов и директорий Блог Проекты Тэги Заметки Search Git игнорирование определенных файлов и директорий #9 суббота, 1 июля 2023 г. 4 минут(ы) 305 слов #Git #Windows #.gitignore .gitignore это специальный файл, который используется Git'ом для игнорирования определенных файлов и директорий, которые не должны быть включены в репозиторий. В .gitignore файле вы указываете шаблоны для файлов и директорий, которые должны быть проигнорированы. Вот пример простого .gitignore файла: Copy Code # Ignore all . txt files * . txt # Ignore all files in the log directory / log / # But do not ignore log . txt , even though you are ignoring . txt files above !/ log . txt В этом примере Git будет игнорировать все .txt файлы, все файлы в директории log, но он не будет игнорировать log.txt. Это полезно, когда у вас есть файлы или директории, которые создаются в процессе работы вашего проекта (например, временные файлы, логи, кеш, файлы, специфические для среды разработки), которые не должны быть включены в ваш репозиторий. .gitignore файл должен быть размещен в корневой директории вашего репозитория. Пример .gitignore Copy Code # Visual Studio 2015 / 2017 cache / options directory . vs / # Build results [ Dd ] ebug / [ Rr ] elease / [ Xx ] 64 / [ Xx ] 86 / [ Bb ] uild / * .7 z / output / ! projects / 3 rd - party - libs / raylib - 4.2.0 / parser / output / / projects / win32 - client / output / / projects / win32 - server / output / / projects / android - client / android . raylib_game / / projects / android - client /*.apk В вашем примере: .vs/ Git будет игнорировать директорию .vs, которую обычно создает Visual Studio для хранения настроек и файлов кэша. [Dd]ebug/, [Rr]elease/, [Xx]64/, [Xx]86/, [Bb]uild/ эти строки игнорируют директории, связанные с процессами сборки и отладки в различных конфигурациях. *.7z эта строка заставляет Git игнорировать все файлы с расширением .7z. /output/ эта строка игнорирует директорию output в корневом каталоге репозитория. !projects/3rd-party-libs/raylib-4.2.0/parser/output/ оператор ! в начале строки отменяет игнорирование. Таким образом, даже если директория output игнорируется, директория projects/3rd-party-libs/raylib-4.2.0/parser/output/ будет включена в репозиторий. /projects/win32-client/output/, /projects/win32-server/output/ эти строки игнорируют конкретные директории output. /projects/android-client/android.raylib_game/ эта строка игнорирует директорию android.raylib_game. /projects/android-client/*.apk эта строка игнорирует все файлы с расширением .apk в директории projects/android-client/. Имейте в виду, что Git обрабатывает шаблоны .gitignore относительно места, где находится файл .gitignore. Если файл .gitignore находится в поддиректории вашего репозитория, то все пути будут интерпретироваться относительно этой директории. ← Предыдущая статья: Как переключиться на другую ветку в Git → Следующая статья: Удаление директории из Git Copyright d00m4ace © 2024", "url": "/posts\\git-ignorirovanie-opredelennyh-fajlov-i-direktorij\\"}, {"title": "Git как устранить конфликт в git push и git pull", "body": "Git как устранить конфликт в git push и git pull Блог Проекты Тэги Заметки Search Git как устранить конфликт в git push и git pull #7 суббота, 1 июля 2023 г. 7 минут(ы) 628 слов #Git #Windows Когда вы выполняете git push или git pull , может возникнуть конфликт, если ваши локальные изменения не совпадают с изменениями в удаленном репозитории. Это часто происходит, когда два человека работают над одним и тем же файлом и затем пытаются объединить свои изменения. Вот как вы можете решить такие конфликты: Выполните git pull (или git fetch и git merge ), чтобы получить последние изменения из удаленного репозитория. Если есть конфликты, Git покажет сообщение, которое указывает на конфликтующие файлы. Откройте эти файлы в редакторе. В файлах конфликты будут обозначены следующим образом: Copy Code <<<<<<< HEAD\nВаши изменения\n=======\nИзменения из удаленного репозитория\n>>>>>>> branch-name Решите конфликты, выбрав нужные изменения и удалив метки Git (<<<<<<<, =======, >>>>>>>). После разрешения всех конфликтов, сохраните файлы. Выполните git add . (или git add ), чтобы подготовить измененные файлы к коммиту. Выполните git commit -m \"Решение конфликтов\" для создания нового коммита с решенными конфликтами. Наконец, выполните git push origin чтобы отправить ваши изменения в удаленный репозиторий. Помните, что если вам трудно решить конфликт, вы всегда можете обратиться за помощью к другим членам вашей команды или использовать графический интерфейс, такой как GitKraken или SourceTree , который может сделать процесс более наглядным. Команда git reset используется для того, чтобы отменить изменения в определенном файле, которые еще не были зафиксированы (коммитнуты). Это может быть полезно, если вы сделали некоторые изменения, которые вы теперь хотите отменить. Вот как это работает: Copy Code git reset <file> Здесь - это путь к файлу, который вы хотите сбросить. После выполнения этой команды, изменения в указанном файле будут отменены, и файл вернется к состоянию последнего коммита. Обратите внимание, что git reset отменяет только изменения, которые еще не были зафиксированы. Если вы уже сделали коммит с изменениями, и теперь хотите их отменить, вам потребуется использовать другую команду, такую как git revert . Кроме того, будьте осторожны с командой git reset , так как отмена изменений необратима. Прежде чем использовать эту команду, убедитесь, что вы действительно хотите отменить свои изменения. Команда git revert используется для создания нового коммита, который отменяет изменения, сделанные в указанном коммите. Это полезно, если вы зафиксировали изменения (сделали коммит), которые теперь хотите отменить. Вот как это работает: Copy Code git revert <commit> Здесь - это идентификатор коммита, который вы хотите отменить. Идентификатор коммита - это длинная строка символов (обычно 40 шестнадцатеричных символов), которую можно найти, используя команду git log . После выполнения этой команды, Git создаст новый коммит, который отменяет все изменения, сделанные в указанном коммите. Это означает, что история коммитов остается неизменной - вместо того, чтобы удалять или изменять существующие коммиты, вы добавляете новый коммит, который отменяет нежелательные изменения. В отличие от git reset , команда git revert может быть использована для отмены любого коммита, а не только последнего. Кроме того, поскольку git revert сохраняет историю коммитов, это безопасный выбор для отмены изменений в общедоступных или командных репозиториях. Команда git log в Git используется для просмотра истории коммитов. Она показывает список коммитов в обратном хронологическом порядке. Информация, представленная в git log , обычно включает автора коммита, дату коммита и сообщение коммита. Базовое использование команды git log просто: Copy Code git log Это покажет вам полную историю коммитов для текущей ветки. Для каждого коммита вы увидите: Copy Code хэш коммита (идентификатор)\nавтор коммита\nдата и время коммита\nсообщение коммита Есть множество опций, которые можно использовать с git log для настройки вывода. Например, если вы хотите видеть историю коммитов в формате, который показывает только одну строку на коммит, вы можете использовать --oneline флаг: Copy Code git log --oneline Если вы хотите видеть историю коммитов, которые включают только определенного автора, вы можете использовать --author флаг: Copy Code git log --author=\"Author Name\" Еще есть опция --graph , которая показывает ветвление и слияние в истории: Copy Code git log --graph Вместе с этим, есть множество других опций, которые можно использовать для настройки того, как git log отображает историю коммитов. ← Предыдущая статья: Git слияния изменений из одной ветки в другую → Следующая статья: Как переключиться на другую ветку в Git Copyright d00m4ace © 2024", "url": "/posts\\git-kak-ustranit-konflikt-v-git-push-i-git-pull\\"}, {"title": "Git на Windows основы его использования", "body": "Git на Windows основы его использования Блог Проекты Тэги Заметки Search Git на Windows основы его использования #3 пятница, 30 июня 2023 г. 10 минут(ы) 912 слов #Git #Windows Важно: Для работы с Git необходимо запустить командную строку (cmd) от имени администратора в Windows. Кратко основы работы с Git Git - это система контроля версий, которая позволяет отслеживать изменения в файлах. Вот несколько базовых команд: git init : Эта команда инициализирует новый репозиторий Git в текущем каталоге. Это создает новый подкаталог .git, который содержит все необходимые метаданные для нового репозитория. Copy Code git init git clone : Если вы хотите скопировать существующий репозиторий, используйте команду git clone. Например: Copy Code git clone https://github.com/user/repo.git git add : Чтобы добавить файлы в репозиторий, используйте команду git add. Например, чтобы добавить файл с именем example.txt, используйте Copy Code git add example.txt git add . используется для добавления всех новых и изменённых файлов в текущем каталоге и всех его подкаталогах в область подготовленных к коммиту (staging area) Git. Это означает, что все эти файлы будут учтены в следующем коммите. Команда git add . не включает новые файлы, которые указаны в файле .gitignore. Copy Code git add . Важно отметить, что команда git add . не включает в себя удалённые файлы. Если вы удалили файл и хотите, чтобы Git заметил это, вам потребуется использовать команду git rm . Copy Code git rm Команда git rm используется для удаления файлов из рабочего каталога и индекса Git. По сути, она делает две вещи: Удаляет файлы из рабочего каталога (то есть физически удаляет их с диска). Удаляет файлы из индекса Git (также называемого областью подготовленных изменений). Это означает, что они больше не будут отслеживаться Git. Пример использования: Copy Code git rm myfile.txt Эта команда удалит myfile.txt из рабочего каталога и из индекса Git. После выполнения этой команды, вам потребуется выполнить коммит, чтобы зафиксировать эти изменения в истории Git. Если вы хотите удалить файл только из индекса Git (то есть прекратить отслеживание файла, но оставить его на диске), вы можете использовать команду git rm --cached : Copy Code git rm --cached myfile.txt git commit : Эта команда создает новый \"снимок\" вашего репозитория с любыми изменениями, которые вы добавили с помощью команды git add . \nИспользуйте Copy Code git commit -m \"Ваше сообщение о коммите\" git push : Чтобы отправить ваши коммиты на удаленный сервер, используйте git push . Если вы клонировали репозиторий, Git автоматически устанавливает ссылку на оригинальный репозиторий. Вы можете просто использовать, чтобы отправить ваши изменения на сервер. Copy Code git push origin master git pull : Эта команда загружает любые изменения с удаленного сервера и объединяет их с вашей текущей версией. Используйте git pull чтобы быть в курсе последних обновлений. Copy Code git pull git status : Чтобы увидеть, какие изменения вы сделали, но еще не закоммитили, используйте Copy Code git status git diff : Эта команда показывает различия между вашими файлами и последним коммитом. Copy Code git diff Описание дополнительных опций git config --global core.autocrlf false Copy Code git config --global core.autocrlf false Команда используется для настройки Git на то, чтобы не изменять символы конца строки при коммитах и при извлечении (чекауте) файлов. core.autocrlf — это настройка Git, которая определяет, как Git будет обрабатывать символы конца строки при записи файлов в репозиторий и при извлечении их обратно в рабочий каталог. Если core.autocrlf установлен в true , Git будет автоматически заменять символы конца строки CRLF (используемые в Windows) на LF (используемые в Unix) при записи файлов в репозиторий, и заменять LF обратно на CRLF при извлечении файлов в рабочий каталог. Если core.autocrlf установлен в false , Git не будет делать никаких автоматических замен. Это может быть полезно, если вы работаете в среде, где смешиваются разные типы операционных систем, или если вы просто хотите оставить символы конца строки \"как есть\". Также есть третий вариант core.autocrlf input , который при записи в репозиторий заменяет CRLF на LF, но при извлечении не делает обратной замены. Опция --global означает, что эта настройка будет применена глобально, то есть для всех репозиториев на вашем компьютере. Если вы хотите применить эту настройку только для одного конкретного репозитория, вы можете использовать опцию --local вместо --global . Команды git config --global user.name и git config --global user.email используются для установки глобальных настроек имени пользователя и адреса электронной почты для Git. Это имя пользователя и адрес электронной почты будут использоваться в качестве информации о вас при каждом коммите. Copy Code git config -- global user . name \"d00m4ace\" git config --global user.email \"d00m4ace79@gmail.com\" Эти команды устанавливают глобальные настройки Git для вашего имени пользователя как \"d00m4ace\" и для вашего адреса электронной почты как \"d00m4ace79@gmail.com\" . Это значит, что при каждом коммите, Git будет использовать эти данные в качестве информации о коммитере. Если вы хотите установить эти настройки только для одного конкретного репозитория, вы можете использовать команды без флага --global . Copy Code git config user . name \"d00m4ace\" git config user . email \"d00m4ace79@gmail.com\" В этом случае, эти настройки будут применены только для репозитория, в котором вы находитесь в данный момент. Кратко резюме комманд Для работы с Git необходимо запустить командную строку (cmd) от имени администратора в Windows.\nДля начала определим пользователья глобально и перенос новых строк отключим авто замену CRLF обратно на LF.\nИ также core.symlinks true позволяет Git создавать и обрабатывать символические ссылки. Copy Code git config -- global core . autocrlf false git config -- global core . symlinks true git config -- global user . name \"d00m4ace\" git config --global user.email \"d00m4ace79@gmail.com\" Для создания нового репозитория и отправки всего его содержимого в новый уже созданый репозиторий на github: Copy Code git init\ngit config --local core.symlinks true\ngit add .\ngit status\n\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/d00m4ace/hex.play.git\ngit push -u origin main\n\ngit status\ngit push\ngit pull Если вы хотите скопировать существующий репозиторий, используйте команду git clone : Copy Code git clone --config core.symlinks=true https://github.com/d00m4ace/HEXPLAY.git ← Предыдущая статья: Установка Git на Windows → Следующая статья: Основы Git, которые используется для работы с ветками Copyright d00m4ace © 2024", "url": "/posts\\git-na-windows-osnovy-ego-ispolzovanija\\"}, {"title": "Git слияния изменений из одной ветки в другую", "body": "Git слияния изменений из одной ветки в другую Блог Проекты Тэги Заметки Search Git слияния изменений из одной ветки в другую #6 суббота, 1 июля 2023 г. 2 минут(ы) 130 слов #Git #Windows Команда git merge используется в системе контроля версий Git для слияния изменений из одной ветки в другую. Общий синтаксис команды следующий: Copy Code git merge [branch-name] При использовании этой команды, Git пытается автоматически совместить коммиты из указанной ветки [branch-name] с той веткой, в которой вы сейчас находитесь. Если Git может автоматически совместить все изменения, то это называется \" fast-forward \" слиянием. Однако, если есть конфликтующие изменения, которые Git не может автоматически совместить, вам потребуется решить эти конфликты вручную. В общем, команда git merge позволяет вам совмещать изменения из разных веток вместе, что является ключевым аспектом в рабочих процессах контроля версий. Помните, что перед выполнением git merge важно убедиться, что вы находитесь в ветке, в которую хотите слить изменения. Это можно проверить с помощью команды git branch , которая покажет вам текущую активную ветку. ← Предыдущая статья: Клонирования репозитория Git → Следующая статья: Git как устранить конфликт в git push и git pull Copyright d00m4ace © 2024", "url": "/posts\\git-slijanija-izmenenij-iz-odnoj-vetki-v-druguju\\"}, {"title": "Использование GitHub Copilot в Visual Studio 2022 для разработки 2D MMORPG игры с d00m4ace. DevLog#1", "body": "Использование GitHub Copilot в Visual Studio 2022 для разработки 2D MMORPG игры с d00m4ace. DevLog#1 Блог Проекты Тэги Заметки Search Использование GitHub Copilot в Visual Studio 2022 для разработки 2D MMORPG игры с d00m4ace. DevLog#1 #29 пятница, 15 декабря 2023 г. 3 минут(ы) 170 слов #GitHub #Copilot #Visual Studio #MMORPG #DevLog Присоединяйтесь к d00m4ace, увлеченному разработчику игр, который погружается в запутанный мир создания 2D MMORPG с помощью программирования на чистом языке C. В этом познавательном видео d00m4ace рассказывает о продвинутой интеграции нейронных сетей и искусственного интеллекта в разработку игр. Практическая демонстрация функции GitHub Copilot в Visual Studio 2022, показывающая, как она предлагает и генерирует код на основе контекстного понимания. Настройтесь на увлекательное сочетание технических знаний и практических советов, идеально подходящее как для начинающих, так и для опытных разработчиков игр. 00:00:12 - Использование нейросетей в разработке 2D MMORPG на C 00:01:30 - Обсуждение Visual Studio 2022 и GitHub Copilot 00:03:08 - Демонстрация экрана логина и создание правил пароля с использованием GitHub Copilot 00:06:15 - Использования GitHub Copilot для работы с разными языками и локализациями в игре 00:09:07 - Примеры использования GitHub Copilot в процессе программирования 00:12:00 - Практическое применение GitHub Copilot в текущем проекте игры 00:17:10 - Методы и подходы к документированию кода с помощью Copilot Web: https://d00m4ace.com/ GitHub: https://github.com/d00m4ace/ YouTube: https://www.youtube.com/c/@d00m4ace Telegram: https://t.me/d00m4ace_blog ← Предыдущая статья: Как объединять или разделять файлы MP4 без потери качества → Следующая статья: D00M4ACE подкаст 1 Падение стоимости акций Tencent на 46 миллиардов долларов и новый закон об онлайн-играх в Китае Copyright d00m4ace © 2024", "url": "/posts\\ispolzovanie-github-copilot-v-visual-studio-2022-dlja-razrabotki-2d-mmorpg-igry-s-d00m4acedot-devlogsharp1\\"}, {"title": "Как объединять или разделять файлы MP4 без потери качества", "body": "Как объединять или разделять файлы MP4 без потери качества Блог Проекты Тэги Заметки Search Как объединять или разделять файлы MP4 без потери качества #28 суббота, 25 ноября 2023 г. понедельник, 27 ноября 2023 г. 3 минут(ы) 244 слова #MP4Tools #MP4 #Windows #Ubuntu MP4Tools — это набор бесплатных инструментов для работы с MP4 файлами для Windows, Mac OS, Linux. Включает в себя MP4Joiner для объединения нескольких MP4 файлов без перекодирования и потери качества, и MP4Splitter для разделения одного MP4 файла на несколько частей, также без потери качества. Эти приложения являются открытым программным обеспечением и полностью бесплатны. MP4Tools выделяется своей скоростью обработки файлов MP4, так как не требует повторного кодирования видео и аудиоданных при объединении или разделении. Это позволяет значительно сократить время обработки по сравнению с такими редакторами, как Adobe Premiere Pro , Final Cut Pro , Sony Vegas , и DaVinci Resolve . Объединение или разделение двух 1 Гб MP4 файлов в MP4Tools занимает всего несколько минут, в то время как в других редакторах это может занять часы. Специальный алгоритм MP4Tools позволяет работать с файлами без изменения их качества и без необходимости в мощном оборудовании. Это достигается путем добавления или удаления файловых заголовков, а также путем объединения или разделения видео- и аудиоданных без изменения их исходного качества. Вот как использовать MP4Tools/MP4Joiner для объединения файлов MP4: Загрузите и установите MP4Tools - https://www.mp4joiner.org . Запустите инструмент MP4Joiner . Добавьте файлы MP4, которые вы хотите объединить. Нажмите кнопку \"Объединить/Join\". Вот как использовать MP4Tools/MP4Splitter для разделения файлов MP4: Загрузите и установите MP4Tools - https://www.mp4joiner.org . Запустите инструмент MP4Splitter . Добавьте файл MP4, который вы хотите разделить. Выберите, как вы хотите разделить файл. Вы можете разделить его по времени, по размеру или по количеству файлов. Нажмите кнопку \"Разделить/Start splitting\". ← Предыдущая статья: Как установить PgAdmin на Ubuntu 22.04 → Следующая статья: Использование GitHub Copilot в Visual Studio 2022 для разработки 2D MMORPG игры с d00m4ace. DevLog#1 Copyright d00m4ace © 2024", "url": "/posts\\kak-obedinjat-ili-razdeljat-fajly-mp4-bez-poteri-kachestva\\"}, {"title": "Как переключиться на другую ветку в Git", "body": "Как переключиться на другую ветку в Git Блог Проекты Тэги Заметки Search Как переключиться на другую ветку в Git #8 суббота, 1 июля 2023 г. 2 минут(ы) 145 слов #Git #Windows Чтобы переключиться на другую ветку в Git, вы можете использовать команду git checkout , за которой следует имя ветки, на которую вы хотите переключиться. Например, если у вас есть ветка с именем feature , вы можете переключиться на нее следующим образом: Copy Code git checkout feature Если вы хотите создать новую ветку и сразу переключиться на нее, вы можете использовать команду git checkout с флагом -b : Copy Code git checkout -b new_feature В этом случае команда создаст новую ветку с именем new_feature и немедленно переключит ваш рабочий каталог на эту ветку. После того, как вы переключились на ветку, все ваши последующие коммиты будут применяться к этой ветке, пока вы снова не переключитесь на другую ветку. Всегда полезно знать, на какой ветке вы находитесь в данный момент. Вы можете использовать команду git branch для просмотра всех веток и определения текущей активной ветки. Текущая ветка будет отмечена звездочкой (*). ← Предыдущая статья: Git как устранить конфликт в git push и git pull → Следующая статья: Git игнорирование определенных файлов и директорий Copyright d00m4ace © 2024", "url": "/posts\\kak-perekljuchitsja-na-druguju-vetku-v-git\\"}, {"title": "Как сделать свой GPT в ChatGPT", "body": "Как сделать свой GPT в ChatGPT Блог Проекты Тэги Заметки Search Как сделать свой GPT в ChatGPT #34 среда, 3 января 2024 г. 4 минут(ы) 324 слова #GPT #ChatGPT Чтобы создать свой GPT в ChatGPT, используйте новую функцию GPT Builder от OpenAI. Это доступно для подписчиков ChatGPT Plus и интегрировано с интерфейсом GPT-4. Процесс включает в себя использование GPT Builder для определения поведения и функций вашего GPT, например, для обучения языку. Вы также можете добавить уникальные файлы знаний и действия, подключая ваш GPT к API для расширенной функциональности. https://chat.openai.com/g/g-120mbTvh6-d00m4ace-razrabotka-2d-mmorpg-blog-ii-i-geimdev Для создания своего GPT в ChatGPT: Подпишитесь на ChatGPT Plus, чтобы получить доступ к функции GPT Builder. Чтобы создать GPT, нажмите на кнопку \"Explore\" или \"Исследовать\", расположенную на левой боковой панели. 1) Затем вы увидите три раздела: My GPTs, Recently Used и Made by OpenAI. В разделе My GPTs нам нужно нажать на кнопку \"Create a GPT\". 2) На следующем экране вы можете либо попросить ChatGPT сделать это за вас в окне \"Создать\", либо нажать \"Настроить\" и настроить все самостоятельно: Кратко рассмотрим поля раздела Configure: Name/Description. Название и описание вашего GPT Instructions. Указания о том, как должен вести себя наш GPT. Это основной промпт, который мы даем ChatGPT в наших чатах. Conversation Starters. 4 примера промптов, которые появляются при начале нового чата Knowledge (знания). Любой файл, который вы хотите добавить к вашему GPT для его дальнейшей настройки Capabilities (Возможности). Здесь вы можете включить просмотр веб-страниц, DALL-E или интерпретатор кода для вашего GPT Actions (Действия). Это расширенная настройка, позволяющая получать информацию или выполнять действия за пределами ChatGPT. По сути, здесь вы можете подключить ваш GPT к API. 3) Затем сохраните GPT и сделайте его общедоступным, выберите домен в качестве создателя в профиле сборщика и проверьте домен через TXT: После публикации как GPT будет доступен всем пользователям ChatGPT. ← Предыдущая статья: D00M4ACE подкаст 4 Почему все ненавидят YouTube shorts → Следующая статья: D00M4ACE подкаст 5 Хорошая графика не имеет значения в видеоиграх Copyright d00m4ace © 2024", "url": "/posts\\kak-sdelat-svoj-gpt-v-chatgpt\\"}, {"title": "Как установить PgAdmin на Ubuntu 22.04", "body": "Как установить PgAdmin на Ubuntu 22.04 Блог Проекты Тэги Заметки Search Как установить PgAdmin на Ubuntu 22.04 #27 среда, 19 июля 2023 г. 2 минут(ы) 67 слов #PgAdmin #curl #Ubuntu Обновите список пакетов: Copy Code sudo apt update Установите curl: Copy Code sudo apt install curl Добавьте репозиторий ключей: Copy Code curl https : //www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add Создайте файл репозитория: Copy Code sudo sh -c 'echo \"deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main\" > /etc/apt/sources.list.d/pgadmin4.list && apt update' Установите PgAdmin: Copy Code sudo apt install pgadmin4-desktop Теперь вы можете запустить PgAdmin через терминал командой pgadmin4 или через меню приложений. ← Предыдущая статья: Как установить PostgreSQL на Ubuntu 22.04 → Следующая статья: Как объединять или разделять файлы MP4 без потери качества Copyright d00m4ace © 2024", "url": "/posts\\kak-ustanovit-pgadmin-na-ubuntu-22dot04\\"}, {"title": "Как установить PostgreSQL на Ubuntu 22.04", "body": "Как установить PostgreSQL на Ubuntu 22.04 Блог Проекты Тэги Заметки Search Как установить PostgreSQL на Ubuntu 22.04 #26 среда, 19 июля 2023 г. 2 минут(ы) 75 слов #PostgreSQL #Ubuntu Обновите список пакетов: Copy Code sudo apt update Установите PostgreSQL: Copy Code sudo apt install postgresql postgresql-contrib Убедитесь, что PostgreSQL запущен: Copy Code sudo systemctl start postgresql Установите PostgreSQL для автоматического запуска при загрузке: Copy Code sudo systemctl enable postgresql Войдите в PostgreSQL с аккаунтом postgres : Copy Code sudo -u postgres psql Теперь установите пароль для пользователя postgres : Copy Code \\password postgres Введите новый пароль и подтвердите его. Для выхода из PostgreSQL используйте команду \\q . ← Предыдущая статья: Как установить VSCode на Ubuntu и использовать его с помощью Python → Следующая статья: Как установить PgAdmin на Ubuntu 22.04 Copyright d00m4ace © 2024", "url": "/posts\\kak-ustanovit-postgresql-na-ubuntu-22dot04\\"}, {"title": "Как установить VSCode на Ubuntu и использовать его с помощью Python", "body": "Как установить VSCode на Ubuntu и использовать его с помощью Python Блог Проекты Тэги Заметки Search Как установить VSCode на Ubuntu и использовать его с помощью Python #25 вторник, 18 июля 2023 г. 3 минут(ы) 226 слов #Python #VSCode #Ubuntu Загрузите последнюю версию Visual Studio Code с помощью команды wget: Copy Code wget https : // go . microsoft . com / fwlink / ? LinkID = 760868 - O vscode . deb Установите скачанный пакет, используя команду dpkg: Copy Code sudo dpkg -i vscode.deb Если появятся проблемы с зависимостями, их можно исправить с помощью команды: Copy Code sudo apt-get install -f Откройте Visual Studio Code. Установка расширения Python для VSCode.\nПерейдите в раздел \"Extensions\" или нажмите Ctrl+Shift+X.\nВведите \"Python\" в поле поиска, выберите расширение Python, которое обычно разрабатывается компанией Microsoft. Создайте каталог проекта и виртуальную среду Pyhton: Copy Code mkdir your_project\ncd /path/to/your_project\n\npython3.11 -m venv env311 Откройте проект в VSCode. Copy Code code . Нажмите Ctrl+Shift+P, чтобы открыть выпадающее меню \"Command Palette\".\nНапишите \"Python: Select Interpreter\" и выберите эту команду.\nВ открывшемся списке выберите виртуальное окружение, которое вы только что создали (оно должно быть подписано как ./env311/bin/pyhton).\nТеперь, когда вы запускаете код Python в VSCode, он будет использовать выбранное виртуальное окружение. В папке вашего проекта создайте или откройте папку .vscode: Copy Code mkdir .vscode И в ней создайте или откройте файл launch.json: Copy Code cd .vscode\ntouch .vscode/launch.json В файле launch.json добавьте следующую конфигурацию: Copy Code { \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Python: Current File\", \"type\": \"python\", \"request\": \"launch\", \"program\": \" ${ file } \", \"console\": \"integratedTerminal\", \"python\": \" ${ workspaceFolder } /env311/bin/python\" } ]\n} Теперь, когда вы нажимаете F5, чтобы запустить текущий Python файл, Visual Studio Code будет использовать интерпретатор Python из вашего виртуального окружения env311. ← Предыдущая статья: Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Ubuntu → Следующая статья: Как установить PostgreSQL на Ubuntu 22.04 Copyright d00m4ace © 2024", "url": "/posts\\kak-ustanovit-vscode-na-ubuntu-i-ispolzovat-ego-s-pomoschju-python\\"}, {"title": "Как запустить командную строку (cmd) от имени администратора в Windows 7, 10, 11", "body": "Как запустить командную строку (cmd) от имени администратора в Windows 7, 10, 11 Блог Проекты Тэги Заметки Search Как запустить командную строку (cmd) от имени администратора в Windows 7, 10, 11 #1 четверг, 1 июня 2023 г. 2 минут(ы) 107 слов #cmd #Windows #Administrator Для того чтобы запустить командную строку с правами администратора в Windows, следуйте этим шагам: Переместите курсор мыши в нижний левый угол экрана, где находится кнопка \"Пуск\" (логотип Windows). Рядом с кнопкой \"Пуск\" в поле поиска начните вводить \"cmd\" или \"командная строка\". В результатах поиска найдите \"Командная строка\" или \"Command Prompt\". Наведите курсор мыши на этот результат. Нажмите правую кнопку мыши, в открывшемся контекстном меню выберите \"Запустить от имени администратора\" или \"Run as Administrator\". Возможно, откроется окно контроля учетных записей пользователей, где вам будет предложено подтвердить действие. Нажмите \"Да\" или \"Yes\". После выполнения этих шагов у вас откроется командная строка с правами администратора. → Следующая статья: Установка Git на Windows Copyright d00m4ace © 2024", "url": "/posts\\kak-zapustit-komandnuju-stroku-cmd-ot-imeni-administratora-v-windows-7-10-11\\"}, {"title": "Клонирования репозитория Git", "body": "Клонирования репозитория Git Блог Проекты Тэги Заметки Search Клонирования репозитория Git #5 суббота, 1 июля 2023 г. 5 минут(ы) 367 слов #Git #Windows Команда git clone --config core.symlinks=true https://github.com/d00m4ace/HEXPLAY.git используется для клонирования репозитория Git с определенной конфигурацией. Copy Code git clone --config core.symlinks=true https://github.com/d00m4ace/HEXPLAY.git git clone это команда, которая клонирует репозиторий в новую директорию. Это означает, что она создает копию репозитория на вашем локальном компьютере. Опция --config core.symlinks=true задает конфигурацию для этого конкретного клонированного репозитория. В данном случае core.symlinks=true позволяет Git создавать и обрабатывать символические ссылки. Адрес https://github.com/d00m4ace/HEXPLAY.git это URL репозитория, который вы хотите клонировать. В итоге, эта команда клонирует репозиторий по указанному URL в новую папку на вашем компьютере с именем HEXPLAY и устанавливает настройку core.symlinks=true для этого клонированного репозитория. Команда git remote add origin https://github.com/d00m4ace/hex.play.git используется для добавления удаленного репозитория Git, который назначается как \"origin\" . Copy Code git remote add origin https://github.com/d00m4ace/hex.play.git В этой команде: git remote add — это команда для добавления нового удаленного репозитория. origin — это общепринятое название для главного удаленного репозитория. Это не обязательное название, и вы можете выбрать любое другое имя, но \"origin\" часто используется по умолчанию. https://github.com/d00m4ace/hex.play.git — это URL удаленного репозитория, который вы хотите добавить.\nПосле выполнения этой команды, вы можете использовать origin для ссылки на этот удаленный репозиторий при выполнении других команд Git, таких как git push origin или git pull origin . Copy Code git push origin\ngit pull origin Обратите внимание, что эта команда должна быть выполнена внутри вашего локального репозитория Git. Команда git push -u origin main используется для отправки изменений из вашей локальной ветки main в удаленный репозиторий, который вы назвали origin . Copy Code git push -u origin main В этой команде: git push — это команда, которая отправляет ваши локальные изменения на удаленный репозиторий. -u — это короткая форма для --set-upstream . При использовании этой опции, ваша локальная ветка main будет связана с удаленной веткой main в репозитории origin . Это означает, что в будущем, для этой ветки вы сможете просто использовать git push или git pull без указания имени ветки. Copy Code git push\ngit pull origin — это имя удаленного репозитория, который вы добавили ранее. main — это имя вашей локальной ветки, которую вы хотите отправить на origin . В итоге, эта команда отправляет все коммиты из вашей локальной ветки main на удаленный репозиторий origin и связывает эти две ветки для упрощения будущих операций push и pull . ← Предыдущая статья: Основы Git, которые используется для работы с ветками → Следующая статья: Git слияния изменений из одной ветки в другую Copyright d00m4ace © 2024", "url": "/posts\\klonirovanija-repozitorija-git\\"}, {"title": "Команда sc create для создания новых служб в Windows", "body": "Команда sc create для создания новых служб в Windows Блог Проекты Тэги Заметки Search Команда sc create для создания новых служб в Windows #16 понедельник, 3 июля 2023 г. 4 минут(ы) 257 слов #Windows #Windows service Команда sc create используется для создания новых служб в Windows. Она имеет множество опций, которые позволяют управлять различными аспектами службы. Вот основные из них: binPath= : Это обязательная опция, указывающая путь к исполняемому файлу службы. displayname= : Это дружественное имя службы, которое отображается в утилитах управления службами Windows. start= : Это определяет, когда служба должна быть запущена. Он может быть установлен в boot, system, auto, demand (по умолчанию) или disabled . obj= : Это определяет учетную запись, под которой будет работать служба. По умолчанию это LocalSystem . password= : Это пароль учетной записи, указанной в параметре obj . Этот параметр игнорируется, если служба работает под учетной записью LocalSystem . type= : Это определяет тип службы. Он может быть установлен в own, share, kernel, filesys, rec . error= : Это определяет действие, которое должно быть выполнено, когда служба не может быть запущена. Он может быть установлен в normal, severe, critical, ignore . tag= : Это определяет, будет ли служба использовать тегированный заказ при загрузке драйверов. depend= : Это список имен служб или групп, от которых зависит данная служба. group= : Это имя группы загрузки, в которую входит служба. priority= : Это приоритет загрузки для службы в своей группе. prefix= : Это префикс для имени службы, который используется при сортировке имени в списках служб. Пример использования sc create с несколькими из этих опций: Copy Code sc create MyService binPath= \"C:\\path\\to\\my\\service.exe\" start= auto obj= \"NT AUTHORITY\\NetworkService\" Эта команда создаст службу с именем \"MyService\" , которая автоматически запускается при загрузке и работает под учетной записью \"NetworkService\" . ← Предыдущая статья: Настройка Certbot и Nginx для работы с HTTPS в Windows → Следующая статья: Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Windows Server 2019 Copyright d00m4ace © 2024", "url": "/posts\\komanda-sc-create-dlja-sozdanija-novyh-sluzhb-v-windows\\"}, {"title": "Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Ubuntu", "body": "Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Ubuntu Блог Проекты Тэги Заметки Search Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Ubuntu #24 вторник, 18 июля 2023 г. 12 минут(ы) 1084 слова #Python #Nginx #HTTPS #Flask #Ubuntu Настройка Nginx Вам нужно настроить Nginx, чтобы использовать SSL и перенаправлять запросы на ваше приложение Flask. Если вы используете файл /etc/nginx/sites-available/default , добавьте следующий server для нужного поддомена например api.pixelrobot.ru : Copy Code server { # Add index . php to the list if you are using PHP index index . html index . htm index . nginx - debian . html ; server_name api . pixelrobot . ru ; # managed by Certbot location / { proxy_pass http : //localhost:5000; proxy_set_header Host $ host ; proxy_set_header X - Real - IP $ remote_addr ; proxy_set_header X - Forwarded - For $ proxy_add_x_forwarded_for ; proxy_set_header X - Forwarded - Host $ host : $ server_port ; proxy_set_header X - Forwarded - Port $ server_port ; } listen 443 ssl ; # managed by Certbot ssl_certificate / etc / letsencrypt / live / pixelrobot . ru / fullchain . pem ; # managed by Certbot ssl_certificate_key / etc / letsencrypt / live / pixelrobot . ru / privkey . pem ; # managed by Certbot include / etc / letsencrypt / options - ssl - nginx . conf ; # managed by Certbot ssl_dhparam / etc / letsencrypt / ssl - dhparams . pem ; # managed by Certbot } Давайте разберем каждую директиву внутри блока \"location\": proxy_pass http://localhost:5000; Эта директива указывает адрес бэкэнд-сервера https://api.pixelrobot.ru/ , на который будут перенаправляться входящие запросы. proxy_set_header Host $host; Эта директива устанавливает заголовок \"Host\" в перенаправляемом запросе со значением из исходного заголовка \"Host\". Она обеспечивает передачу правильного имени хоста на бэкэнд-сервер. proxy_set_header X-Real-IP $remote_addr; Эта директива устанавливает заголовок \"X-Real-IP\" в перенаправляемом запросе со значением IP-адреса клиента, совершающего запрос. Она может быть полезна для логирования или определения IP-адреса клиента на бэкэнд-сервере. proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; Эта директива устанавливает заголовок \"X-Forwarded-For\" в перенаправляемом запросе. Если заголовок \"X-Forwarded-For\" уже присутствует, то она добавляет IP-адрес клиента к существующему значению. Этот заголовок обычно используется для отслеживания исходного IP-адреса клиента при прохождении через промежуточные прокси. proxy_set_header X-Forwarded-Host $host:$server_port; Эта директива устанавливает заголовок \"X-Forwarded-Host\" в перенаправляемом запросе со значением из исходного заголовка \"Host\", за которым следует номер порта сервера. proxy_set_header X-Forwarded-Port $server_port; Эта директива устанавливает заголовок \"X-Forwarded-Port\" в перенаправляемом запросе со значением номера порта сервера. Вместе эти директивы настраивают обратный прокси для передачи оригинального запроса на бэкэнд-сервер, указанный как http://localhost:5000 , с сохранением соответствующих заголовков для правильной работы и идентификации. В этой конфигурации все запросы HTTP перенаправляются на HTTPS, а запросы HTTPS передаются на ваше приложение Flask, которое, как предполагается, работает на порту 5000 . Перезапуск Nginx Сначала проверим, все ли изменения в конфигурации Nginx были сделаны правильно: Copy Code sudo nginx -t Если все в порядке, перезапустите Nginx: Copy Code sudo nginx - s reload Простое приложение на Python, Flask и Waitress Вот пример простого REST приложения на Flask и Waitress. Сначала установим необходимые библиотеки через pip, в среде выполнения python3: Copy Code pip install flask waitress Далее, создадим простое Flask приложение с одним маршрутом: Copy Code #get.py from flask import Flask , request , jsonify from waitress import serve app = Flask ( __name__ ) @app . route ( '/get' , methods = [ 'GET' ]) def get (): # Access URL parameters with request.args name = request . args . get ( 'name' ) age = request . args . get ( 'age' ) if name and age : print ( f \"Received data: Name - { name } , Age - { age } \" ) return \"Data received and processed\" , 200 else : return \"No data received\" , 400 #if __name__ == '__main__': #    app.run(debug=True) if __name__ == \"__main__\" : #app.run(host='0.0.0.0',port=5000) #We now use this syntax to server our app. #serve(app, host='0.0.0.0', port=5000) serve ( app , host = '0.0.0.0' , port = 5000 , url_scheme = 'https' ) # C:\\curl\\curl \"https://api.pixelrobot.ru/get?name=John&age=30\" Это пример приложения слушает на порту 5000 и возвращает приветственное сообщение при обращении к маршруту ' /get '. Вы можете запустить приложение из командной строки: Copy Code python app.py Теперь, при переходе на https://api.pixelrobot.ru/get?name=John&age=30 , вы получите ответ Data received and processed . А в терминале на сервере будет выведен текст: Copy Code ( env311 ) d00m4ace @server : ~/ projects / python $ python3 get . py Received data : Name - John , Age - 30 Если вы хотите добавить больше маршрутов или функциональности, вы можете сделать это, добавив больше маршрутов и функций в ваше приложение Flask. REST приложение на Python, Flask и Waitress Мы определим несколько базовых REST маршрутов, которые будут возвращать некоторые данные в формате JSON. Copy Code # app.py from flask import Flask , jsonify app = Flask ( __name__ ) @app . route ( '/api/tasks' , methods = [ 'GET' ]) def get_tasks (): tasks = [ { \"id\" : 1 , \"title\" : \"Buy groceries\" , \"completed\" : False }, { \"id\" : 2 , \"title\" : \"Study for test\" , \"completed\" : True }, ] return jsonify ( tasks ) @app . route ( '/api/tasks/<int:task_id>' , methods = [ 'GET' ]) def get_task ( task_id ): tasks = [ { \"id\" : 1 , \"title\" : \"Buy groceries\" , \"completed\" : False }, { \"id\" : 2 , \"title\" : \"Study for test\" , \"completed\" : True }, ] for task in tasks : if task [ \"id\" ] == task_id : return jsonify ( task ) return jsonify ({ \"error\" : \"Task not found\" }), 404 if __name__ == '__main__' : from waitress import serve serve ( app , host = \"0.0.0.0\" , port = 5000 ) В этом примере мы имеем два маршрута. Один для получения всех задач (GET /api/tasks), и один для получения конкретной задачи по её id (GET /api/tasks/ ). Мы используем waitress для запуска нашего приложения. Это production-ready WSGI сервер, который рекомендован для использования с Flask в production. Для запуска приложения используйте команду: Copy Code python app.py Теперь приложение будет слушать на порту 5000 и будет доступно по адресу https://api.pixelrobot.ru/api/tasks и https://api.pixelrobot.ru/api/tasks/ . POST приложение на Python, Flask и Waitress Сначала установим необходимые библиотеки через pip: Copy Code pip install flask waitress Flask приложение на Python обрабатывает разные типы входящих данных: Copy Code # app.py from flask import Flask , request , jsonify from waitress import serve app = Flask ( __name__ ) #app.config['SECRET_KEY'] = 'df0331cefc6c2b9a5d0208a726a5d1c0fd37324feba25506' @app . route ( '/post' , methods = [ 'POST' ]) def post (): if request . is_json : # For JSON data, use request.get_json() data = request . get_json () print ( f \"Received JSON data: { data } \" ) elif request . headers [ 'Content-Type' ] == 'application/x-www-form-urlencoded' : # For form data, use request.form data = request . form print ( f \"Received form data: { data } \" ) else : # For plain text, use request.data data = request . data . decode ( 'utf-8' ) print ( f \"Received plain text data: { data } \" ) return \"Data received and processed\" , 200 #if __name__ == '__main__': #    app.run(debug=True) if __name__ == \"__main__\" : serve ( app , host = '0.0.0.0' , port = 5000 , url_scheme = 'https' ) Для запуска приложения используйте команду: Copy Code python app.py С помощью команды curl отправим POST запрос с JSON данными на конечную точку /post по указанному URL. Copy Code C:\\curl\\curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"name\\\":\\\"John\\\", \\\"age\\\":30}\" https://api.pixelrobot.ru/post Заголовок \"Content-Type: application/json\" сообщает серверу, что клиент (в данном случае curl ) отправляет данные в формате JSON . Это позволяет серверу правильно интерпретировать и обрабатывать отправленные данные. В контексте Flask приложения, когда вы делаете POST запрос и указываете \"Content-Type: application/json\" , Flask знает, что ему следует получить данные из request.get_json(). Copy Code C:\\curl\\curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"name=John&age=30\" https://api.pixelrobot.ru/post Эта команда curl отправляет POST запрос с данными, закодированными как application/x-www-form-urlencoded , на конечную точку /post по указанному URL. Формат \"application/x-www-form-urlencoded\" обычно используется при отправке данных формы HTML. В этом формате, пары имя/значение записываются как name=value, с разделением пар амперсандом (&). В контексте Flask приложения, когда вы делаете POST запрос и указываете \"Content-Type: application/x-www-form-urlencoded\" , Flask будет искать данные в request.form. Copy Code C:\\curl\\curl -X POST -H \"Content-Type: text/plain\" -d \"Hello, World!\" https://api.pixelrobot.ru/post Эта команда curl отправляет POST запрос с данными в формате text/plain на конечную точку /post по указанному URL. Формат text/plain используется для отправки обычного текста. В данном случае, вы отправляете строку \"Hello, World!\". В контексте Flask приложения, когда вы делаете POST запрос и указываете \"Content-Type: text/plain\" , Flask будет искать данные в request.data. Ваш URL https://api.pixelrobot.ru/post в этом примере должен быть заменен на реальный URL вашего сервера. ← Предыдущая статья: Установка Python на Ubuntu → Следующая статья: Как установить VSCode на Ubuntu и использовать его с помощью Python Copyright d00m4ace © 2024", "url": "/posts\\nastroit-nginx-v-kachestve-https-proksi-dlja-vashego-rest-prilozhenija-python-na-flask-i-waitress-na-ubuntu\\"}, {"title": "Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Windows Server 2019", "body": "Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Windows Server 2019 Блог Проекты Тэги Заметки Search Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Windows Server 2019 #17 понедельник, 3 июля 2023 г. 13 минут(ы) 1165 слов #Windows Server #Nginx #REST #Python #Flask #Waitress Настройка Nginx в качестве HTTPS прокси на Windows Server включает в себя установку и конфигурацию Nginx, настройку SSL для HTTPS и настройку обратного прокси. Это очень похоже на процесс для Linux, но есть некоторые различия в установке и настройке. Установка Nginx Загрузите Nginx для Windows с официального сайта. Затем извлеките архив в нужное место, например C:\\nginx. См.: Установка Nginx на Windows 10, Windows 11, Windows Server 2019 Настройка SSL для HTTPS Вам нужно получить сертификат SSL и ключ. Вы можете приобрести их у доверенного поставщика или получить бесплатные сертификаты от Let's Encrypt. См.: Настройка Certbot и Nginx для работы HTTPS соединений в Windows Допустим, вы сохраните их в следующих местах: Copy Code C:\\nginx\\cert\\myapp.crt\nC:\\nginx\\cert\\myapp.key Настройка Nginx Теперь вам нужно настроить Nginx, чтобы использовать SSL и перенаправлять запросы на ваше приложение Flask. См.: Настройка Nginx для обработки HTTP, HTTPS соединений в Windows Редактируйте файл C:\\nginx\\conf\\nginx.conf следующим образом: Copy Code worker_processes 1 ; events { worker_connections 1024 ; } http { include mime.types ; default_type application/octet-stream ; sendfile on ; keepalive_timeout 65 ; server { listen 80 ; server_name localhost ; return 301 https:// $host$request_uri ; } server { listen 443 ssl ; server_name localhost ; ssl_certificate C:/nginx/cert/myapp.crt ; ssl_certificate_key C:/nginx/cert/myapp.key ; ssl_session_cache shared:SSL:1m ; ssl_session_timeout 5m ; ssl_ciphers HIGH:!aNULL:!MD5 ; ssl_prefer_server_ciphers on ; gzip on ; location / { proxy_pass http://localhost:8080 ; proxy_set_header Host $host ; proxy_set_header X-Real-IP $remote_addr ; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for ; proxy_set_header X-Forwarded-Host $host:$server_port ; proxy_set_header X-Forwarded-Port $server_port ; } } } Давайте разберем каждую директиву внутри блока \"location\": proxy_pass http://localhost:8080; Эта директива указывает адрес бэкэнд-сервера http://localhost:8080 , на который будут перенаправляться входящие запросы. proxy_set_header Host $host; Эта директива устанавливает заголовок \"Host\" в перенаправляемом запросе со значением из исходного заголовка \"Host\". Она обеспечивает передачу правильного имени хоста на бэкэнд-сервер. proxy_set_header X-Real-IP $remote_addr; Эта директива устанавливает заголовок \"X-Real-IP\" в перенаправляемом запросе со значением IP-адреса клиента, совершающего запрос. Она может быть полезна для логирования или определения IP-адреса клиента на бэкэнд-сервере. proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; Эта директива устанавливает заголовок \"X-Forwarded-For\" в перенаправляемом запросе. Если заголовок \"X-Forwarded-For\" уже присутствует, то она добавляет IP-адрес клиента к существующему значению. Этот заголовок обычно используется для отслеживания исходного IP-адреса клиента при прохождении через промежуточные прокси. proxy_set_header X-Forwarded-Host $host:$server_port; Эта директива устанавливает заголовок \"X-Forwarded-Host\" в перенаправляемом запросе со значением из исходного заголовка \"Host\", за которым следует номер порта сервера. proxy_set_header X-Forwarded-Port $server_port; Эта директива устанавливает заголовок \"X-Forwarded-Port\" в перенаправляемом запросе со значением номера порта сервера. Вместе эти директивы настраивают обратный прокси для передачи оригинального запроса на бэкэнд-сервер, указанный как http://localhost:8080 , с сохранением соответствующих заголовков для правильной работы и идентификации. В этой конфигурации все запросы HTTP перенаправляются на HTTPS, а запросы HTTPS передаются на ваше приложение Flask, которое, как предполагается, работает на порту 8080 . Запуск Nginx Чтобы запустить Nginx, выберите меню \"Пуск\", введите cmd (для запуска CMD.EXE) или powershell (для запуска PowerShell) и нажмите \"Запуск от имени администратора\" в появившемся контекстном меню. В командной строке, перейдите в директорию C:\\nginx\\ и введите start nginx. Copy Code cd C:\\nginx\nstart nginx Теперь ваше приложение Flask должно быть доступно по HTTPS через ваш сервер Nginx. Если вам нужно остановить Nginx, вы можете использовать команду nginx -s quit в командной строке. Copy Code nginx -s quit Простое приложение на Python, Flask и Waitress Вот пример простого REST приложения на Flask и Waitress. Сначала установим необходимые библиотеки через pip: Copy Code pip install flask waitress Далее, создадим простое Flask приложение с одним маршрутом: Copy Code # app.py from flask import Flask , jsonify app = Flask ( __name__ ) @app . route ( '/api' , methods = [ 'GET' ]) def hello_world (): return jsonify ( message = 'Hello, World!' ) if __name__ == '__main__' : from waitress import serve serve ( app , host = \"0.0.0.0\" , port = 8080 ) Это пример приложения слушает на порту 8080 и возвращает приветственное сообщение при обращении к маршруту ' /api '. Вы можете запустить приложение из командной строки: Copy Code python app.py Теперь, при переходе на http://localhost:8080/api , вы получите ответ { \"message\": \"Hello, World!\" } . Если вы хотите добавить больше маршрутов или функциональности, вы можете сделать это, добавив больше маршрутов и функций в ваше приложение Flask. REST приложение на Python, Flask и Waitress Мы определим несколько базовых REST маршрутов, которые будут возвращать некоторые данные в формате JSON. Copy Code # app.py from flask import Flask , jsonify app = Flask ( __name__ ) @app . route ( '/api/tasks' , methods = [ 'GET' ]) def get_tasks (): tasks = [ { \"id\" : 1 , \"title\" : \"Buy groceries\" , \"completed\" : False }, { \"id\" : 2 , \"title\" : \"Study for test\" , \"completed\" : True }, ] return jsonify ( tasks ) @app . route ( '/api/tasks/<int:task_id>' , methods = [ 'GET' ]) def get_task ( task_id ): tasks = [ { \"id\" : 1 , \"title\" : \"Buy groceries\" , \"completed\" : False }, { \"id\" : 2 , \"title\" : \"Study for test\" , \"completed\" : True }, ] for task in tasks : if task [ \"id\" ] == task_id : return jsonify ( task ) return jsonify ({ \"error\" : \"Task not found\" }), 404 if __name__ == '__main__' : from waitress import serve serve ( app , host = \"0.0.0.0\" , port = 8080 ) В этом примере мы имеем два маршрута. Один для получения всех задач (GET /api/tasks), и один для получения конкретной задачи по её id (GET /api/tasks/ ). Мы используем waitress для запуска нашего приложения. Это production-ready WSGI сервер, который рекомендован для использования с Flask в production. Для запуска приложения используйте команду: Copy Code python app.py Теперь приложение будет слушать на порту 8080 и будет доступно по адресу http://localhost:8080/api/tasks и http://localhost:8080/api/tasks/ . POST приложение на Python, Flask и Waitress Сначала установим необходимые библиотеки через pip: Copy Code pip install flask waitress Flask приложение на Python обрабатывает разные типы входящих данных: Copy Code # app.py from flask import Flask , request , jsonify from waitress import serve app = Flask ( __name__ ) #app.config['SECRET_KEY'] = 'df0331cefc6c2b9a5d0208a726a5d1c0fd37324feba25506' @app . route ( '/post' , methods = [ 'POST' ]) def post (): if request . is_json : # For JSON data, use request.get_json() data = request . get_json () print ( f \"Received JSON data: { data } \" ) elif request . headers [ 'Content-Type' ] == 'application/x-www-form-urlencoded' : # For form data, use request.form data = request . form print ( f \"Received form data: { data } \" ) else : # For plain text, use request.data data = request . data . decode ( 'utf-8' ) print ( f \"Received plain text data: { data } \" ) return \"Data received and processed\" , 200 #if __name__ == '__main__': #    app.run(debug=True) if __name__ == \"__main__\" : serve ( app , host = '0.0.0.0' , port = 8080 , url_scheme = 'https' ) Для запуска приложения используйте команду: Copy Code python app.py С помощью команды curl отправим POST запрос с JSON данными на конечную точку /post по указанному URL. Copy Code C:\\curl\\curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"name\\\":\\\"John\\\", \\\"age\\\":30}\" https://test.hexplay.com/post Заголовок \"Content-Type: application/json\" сообщает серверу, что клиент (в данном случае curl ) отправляет данные в формате JSON . Это позволяет серверу правильно интерпретировать и обрабатывать отправленные данные. В контексте Flask приложения, когда вы делаете POST запрос и указываете \"Content-Type: application/json\" , Flask знает, что ему следует получить данные из request.get_json(). Copy Code C:\\curl\\curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"name=John&age=30\" https://test.hexplay.com/post Эта команда curl отправляет POST запрос с данными, закодированными как application/x-www-form-urlencoded , на конечную точку /post по указанному URL. Формат \"application/x-www-form-urlencoded\" обычно используется при отправке данных формы HTML. В этом формате, пары имя/значение записываются как name=value, с разделением пар амперсандом (&). В контексте Flask приложения, когда вы делаете POST запрос и указываете \"Content-Type: application/x-www-form-urlencoded\" , Flask будет искать данные в request.form. Copy Code C:\\curl\\curl -X POST -H \"Content-Type: text/plain\" -d \"Hello, World!\" https://test.hexplay.com/post Эта команда curl отправляет POST запрос с данными в формате text/plain на конечную точку /post по указанному URL. Формат text/plain используется для отправки обычного текста. В данном случае, вы отправляете строку \"Hello, World!\". В контексте Flask приложения, когда вы делаете POST запрос и указываете \"Content-Type: text/plain\" , Flask будет искать данные в request.data. Ваш URL https://test.hexplay.com/post в этом примере должен быть заменен на реальный URL вашего сервера. ← Предыдущая статья: Команда sc create для создания новых служб в Windows → Следующая статья: Настройка Visual Studio 2022 для работы с Python Copyright d00m4ace © 2024", "url": "/posts\\nastroit-nginx-v-kachestve-https-proksi-dlja-vashego-rest-prilozhenija-python-na-flask-i-waitress-na-windows-server-2019\\"}, {"title": "Настройка Certbot и Nginx для работы с HTTPS в Windows", "body": "Настройка Certbot и Nginx для работы с HTTPS в Windows Блог Проекты Тэги Заметки Search Настройка Certbot и Nginx для работы с HTTPS в Windows #15 понедельник, 3 июля 2023 г. 9 минут(ы) 761 слово #Nginx #Windows #Certbot #SSL #TLS #HTTPS Установка Certbot на Windows Проверьте официальный сайт Certbot для получения полных инструкций https://certbot.eff.org/instructions Загрузите последнюю версию программы установки Certbot для Windows по адресу https://github.com/certbot/certbot/releases/latest/download/certbot-beta-installer-win_amd64_signed.exe . Запустите программу установки и следуйте указаниям мастера. Программа установки предложит каталог установки по умолчанию, C:\\Program Files(x86) , замените его на C:\\Certbot ). Чтобы запустить оболочку для Certbot, выберите меню \"Пуск\", введите cmd (для запуска CMD.EXE) или powershell (для запуска PowerShell) и нажмите \"Запуск от имени администратора\" в появившемся контекстном меню. Перейдите в каталог Certbot Copy Code cd C:\\Certbot Чтобы выполнить команду на Certbot, введите в оболочке имя certbot, затем команду и ее параметры. Например, чтобы отобразить встроенную справку, выполните: Copy Code C:\\Certbot>certbot --help Выберите, как вы хотите запустить Certbot Вы не против временной остановки вашего сайта? Да , мой веб-сервер в настоящее время не запущен на этой машине. Остановите свой веб-сервер, затем выполните эту команду, чтобы получить сертификат. Certbot временно запустит веб-сервер который уже использует порт 80 на вашей машине. Copy Code C:\\Certbot>certbot certonly --standalone Нет , мне нужно, чтобы мой веб-сервер работал. Если у вас есть веб-сервер, который уже использует порт 80 и вы не хотите останавливать его на время работы Certbot, запустите эту команду и следуйте инструкциям в терминале. Copy Code C:\\Certbot>certbot certonly --webroot Важное замечание: Чтобы использовать плагин webroot , ваш сервер должен быть настроен на обслуживание файлов из скрытых каталогов. Если /.well-known обрабатывается особым образом в конфигурации вашего веб-сервера, вам может потребоваться изменить конфигурацию, чтобы файлы внутри /.well-known/acme-challenge обслуживались веб-сервером Проверка автоматического обновления Установка Certbot в вашей системе поставляется с предустановленной запланированной задачей, которая будет автоматически обновлять ваши сертификаты до истечения срока их действия. Вам не нужно будет запускать Certbot снова, если вы не измените свою конфигурацию. Вы можете проверить автоматическое обновление ваших сертификатов, выполнив команду Copy Code C:\\Certbot>certbot renew --dry-run Если вам нужно остановить ваш веб-сервер для запуска Certbot (например, если вы использовали автономный аутентификатор на машине, где обычно используется порт 80), вам нужно отредактировать встроенную команду и добавить флаги --pre-hook и --post-hook для автоматической остановки и запуска вашего веб-сервера. Флаги --pre-hook и --post-hook позволяют запускать команды до и после основной операции Certbot соответственно. Это особенно полезно, когда нужно остановить веб-сервер перед обновлением сертификата и затем снова его запустить. Вот как вы можете использовать эти флаги с Nginx на Windows через WSL: Copy Code certbot certonly --standalone --pre-hook \"net.exe nginx stop\" --post-hook \"net.exe nginx start\" -d yourdomain.com В этой команде: certbot certonly --standalone говорит Certbot запрашивать сертификат, работая в автономном режиме. Это означает, что Certbot самостоятельно запускает временный веб-сервер для проверки вашего домена. --pre-hook \"net.exe nginx stop\" говорит Certbot остановить Nginx перед запросом сертификата. --post-hook \"net.exe nginx start\" говорит Certbot запустить Nginx снова после запроса сертификата. -d yourdomain.com указывает домен, для которого вы запрашиваете сертификат. Замените yourdomain.com на ваш настоящий домен. Эти флаги также можно использовать с командой certbot renew для автоматического обновления сертификатов: Copy Code certbot renew --pre-hook \"net.exe nginx stop\" --post-hook \"net.exe nginx start\" В этой команде certbot renew говорит Certbot проверить все установленные сертификаты и обновить те, которые скоро истекут. Если ваш веб-сервер - Apache 2.4, добавьте следующее к команде certbot renew : Copy Code --pre-hook \"net.exe stop Apache2.4\" --post-hook \"net.exe start Apache2.4\". Процесс настройки Nginx для использования SSL-сертификата Let's Encrypt: Получите сертификат, используя win-acme, Certify The Web или Certbot. Убедитесь, что вы знаете, где хранятся файлы сертификата и ключа. Откройте файл конфигурации Nginx для вашего сайта. Он обычно находится в каталоге C:\\nginx\\conf\\nginx.conf . Добавьте следующие строки в блок server для вашего сайта, заменив /etc/letsencrypt/live/your-domain-name/fullchain.pem и /etc/letsencrypt/live/your-domain-name/privkey.pem на путь к вашему сертификату и ключу: Пример для сайта d00m4ace.com Copy Code http { server { listen 80 ; server_name d00m4ace.com ; # например d00m4ace.com # Перенаправление всех HTTP-запросов на HTTPS return 301 https:// $host$request_uri ; } server { listen 443 ssl ; server_name d00m4ace.com ; # например d00m4ace.com # Настройки SSL сертификата ssl_certificate C:\\Certbot\\live\\hexplay.com\\fullchain.pem ; # managed by Certbot ssl_certificate_key C:\\Certbot\\live\\hexplay.com\\privkey.pem ; # managed by Certbot # Другие настройки SSL, если необходимо ssl_session_cache shared:SSL:1m ; ssl_session_timeout 5m ; ssl_ciphers HIGH:!aNULL:!MD5 ; ssl_prefer_server_ciphers on ; # Добавьте здесь ваши настройки для обработки HTTPS-соединений # Например: location / { root C:/microweb/webroot # путь_к_вашему_корневому_каталогу; index index.html ; } } # Добавьте другие серверные блоки, если необходимо } Проверьте, что ваша конфигурация Nginx корректна, используя команду nginx -t. Copy Code nginx -t Если все в порядке, перезапустите Nginx, чтобы применить новую конфигурацию. Это обычно делается с помощью команды nginx -s reload . Copy Code nginx - s reload Пожалуйста, имейте в виду, что Let's Encrypt выдает сертификаты только на 90 дней, поэтому вам нужно будет настроить автоматическое обновление сертификатов. Это обычно делается с помощью cron задания на Unix-подобных системах или с помощью планировщика заданий Windows. ← Предыдущая статья: Настройка Nginx для обработки HTTP, HTTPS соединений в Windows → Следующая статья: Команда sc create для создания новых служб в Windows Copyright d00m4ace © 2024", "url": "/posts\\nastrojka-certbot-i-nginx-dlja-raboty-s-https-v-windows\\"}, {"title": "Настройка Nginx для обработки HTTP, HTTPS соединений в Windows", "body": "Настройка Nginx для обработки HTTP, HTTPS соединений в Windows Блог Проекты Тэги Заметки Search Настройка Nginx для обработки HTTP, HTTPS соединений в Windows #14 понедельник, 3 июля 2023 г. 5 минут(ы) 374 слова #Nginx #Windows #HTTP #HTTPS Чтобы настроить Nginx для обработки как HTTP , так и HTTPS соединений, вам потребуется определить два отдельных серверных блока в конфигурации Nginx. Один будет обрабатывать HTTP -соединения ( порт 80 ), а другой - HTTPS -соединения ( порт 443 ). Вот пример конфигурации для обработки и перенаправления HTTP -запросов на HTTPS , а также для обработки HTTPS -соединений: Copy Code http { server { listen 80 ; server_name ваш_домен ; # например d00m4ace.com # Перенаправление всех HTTP-запросов на HTTPS return 301 https:// $host$request_uri ; } server { listen 443 ssl ; server_name ваш_домен ; # например d00m4ace.com # Настройки SSL сертификата ssl_certificate /путь_к_вашему_сертификату.crt ; ssl_certificate_key /путь_к_приватному_ключу.key ; # Другие настройки SSL, если необходимо ssl_session_cache shared:SSL:1m ; ssl_session_timeout 5m ; ssl_ciphers HIGH:!aNULL:!MD5 ; ssl_prefer_server_ciphers on ; # Добавьте здесь ваши настройки для обработки HTTPS-соединений # Например: location / { root /путь_к_вашему_корневому_каталогу ; index index.html ; } } # Добавьте другие серверные блоки, если необходимо } В этой конфигурации первый серверный блок слушает порт 80 (HTTP) и перенаправляет все запросы на HTTPS -версию сайта с помощью директивы return 301 . Затем, второй серверный блок слушает порт 443 (HTTPS) и настраивает SSL -сертификаты с помощью директив ssl_certificate и ssl_certificate_key . Внутри этого блока вы можете добавить другие настройки для обработки HTTPS -соединений, такие как местоположение файлов и настройки маршрутизации. Также конфигурационный файл Nginx содержит несколько директив, связанных с SSL/TLS настройками. Давайте разберем каждую директиву по отдельности: ssl_session_cache shared:SSL:1m; - Эта директива определяет, как Nginx кэширует информацию о SSL-сеансах. В данном случае, используется общий кэш с размером 1 мегабайт. ssl_session_timeout 5m; - Эта директива устанавливает время жизни SSL-сеанса в кэше. В данном случае, SSL-сеансы будут храниться в кэше в течение 5 минут. ssl_ciphers HIGH:!aNULL:!MD5; - Эта директива определяет список шифров, которые будут использоваться для установки SSL-соединения. В данном случае, используется набор шифров с высоким уровнем безопасности, исключая анонимные шифры и шифры, использующие алгоритм хеширования MD5. ssl_prefer_server_ciphers on; - Эта директива указывает Nginx приоритет использования шифров, предложенных сервером. Если установлено значение on, Nginx будет предпочитать шифры, предлагаемые сервером, перед клиентскими предпочтениями. Обратите внимание, что настройка SSL/TLS является сложной темой, и рекомендуется обратиться к официальной документации Nginx и руководствам по безопасности для получения подробных инструкций и наилучшей практики настройки SSL/TLS соединений. Не забудьте заменить ваш_домен, /путь_к_вашему_сертификату.crt, /путь_к_приватному_ключу.key и /путь_к_вашему_корневому_каталогу соответственно на свои реальные значения. После внесения необходимых изменений сохраните конфигурационный файл Nginx и перезапустите сервер, чтобы изменения вступили в силу. Copy Code nginx - s reload ← Предыдущая статья: Установка Nginx на Windows 10, Windows 11, Windows Server 2019 → Следующая статья: Настройка Certbot и Nginx для работы с HTTPS в Windows Copyright d00m4ace © 2024", "url": "/posts\\nastrojka-nginx-dlja-obrabotki-http-https-soedinenij-v-windows\\"}, {"title": "Настройка Remote Desktop Connection (RDC) для подключения к Ubuntu с другой машины", "body": "Настройка Remote Desktop Connection (RDC) для подключения к Ubuntu с другой машины Блог Проекты Тэги Заметки Search Настройка Remote Desktop Connection (RDC) для подключения к Ubuntu с другой машины #20 понедельник, 17 июля 2023 г. 2 минут(ы) 59 слов #RDC #Ubuntu На Ubuntu установите xrdp и запустите его: Copy Code sudo apt-get update\nsudo apt-get install xrdp\nsudo systemctl start xrdp\nsudo systemctl enable xrdp Если включен firewall ufw, разрешите RDP-соединения: Copy Code sudo ufw allow 3389 Теперь на другой машине (например, Windows) откройте Remote Desktop Connection, введите IP-адрес вашей машины Ubuntu и подключитесь, используя имя пользователя и пароль Ubuntu. ← Предыдущая статья: Установка OpenSSH на Ubuntu 22.04 → Следующая статья: Установка Nginx на Ubuntu Copyright d00m4ace © 2024", "url": "/posts\\nastrojka-remote-desktop-connection-rdc-dlja-podkljuchenija-k-ubuntu-s-drugoj-mashiny\\"}, {"title": "Настройка Visual Studio 2022 для работы с Python", "body": "Настройка Visual Studio 2022 для работы с Python Блог Проекты Тэги Заметки Search Настройка Visual Studio 2022 для работы с Python #18 вторник, 4 июля 2023 г. 8 минут(ы) 699 слов #Python #Visual Studio Запустите Visual Studio 2022 и выберите \"Create a new project\" . В поиске шаблонов проектов введите \"Python\" , выберите \"Python Application\" и нажмите \"Next\" . Укажите имя и расположение проекта, а затем нажмите \"Create\" . Настройка виртуальной среды Python в Visual Studio 2022 Рекомендуется использовать виртуальную среду для изоляции зависимостей вашего проекта. В окне \"Solution Explorer\" найдите \"Python Environments\" , щелкните правой кнопкой мыши по \"Python Environments\" , выберите \"Add Environments\" . Назовите среду в поле Name как .env , которая будет добавлена в корневой каталог вашего проекта. Наличие виртуальной среды .env по умолчанию для всех проектов удобно для добавления в .gitignore Также выберите версию Python которую хотите использовать с проектом в поле \"Base Interpreter\" , например \"Python 3.11(64-bit)\" . Чтобы активировать созданную виртуальную среду в окне \"Solution Explorer\" выберите нужную вам виртуальную среду из списка \"Python Environments\" . Щелкните правой кнопкой мыши на выбранной среде и выберите \"Activate Environment\" из контекстного меню. Создайте файл requirements.txt в корневой директории вашего проекта. Файл requirements.txt используется для указания зависимостей вашего проекта. Каждая зависимость указывается в отдельной строке в формате <название пакета> == <версия> . Например: Copy Code requests == 2 .25.1 numpy == 1 .19.5 Это можно также сделать для уже установленных модулей в виртуальную среду .env , если выбрвть в \"Python Environments\" , виртуальную среду \".env\" и правой кнопкой мыши, выберите \"Generate requirements.txt\" . Установить зависимости из requirements.txt в вашу виртуальную среду можно выбрав в \"Python Environments\" , виртуальную среду \".env\" и правой кнопкой мыши, выберите \"Install from requirements.txt\" В Visual Studio 2022, вы можете установить пакеты Python прямо из пользовательского интерфейса.\nВ Solution Explorer выберите \"Python Environments\" и щелкните правой кнопкой мыши, затем выберите \"Manage Python Packages...\" В открывшемся окне \"Python Environments\" перейдите на вкладку \"Packages (PyPI)\" .\nВ поле \"Search PyPI and installed packages\" (Поиск в PyPI и установленные пакеты) введите имя пакета, который вы хотите установить, и нажмите Enter.\nЕсли пакет будет найден то ниже нажмите на \"Run command: pip install <имя пакета>\" Если нет то в списке результатов найдите нужный пакет и щелкните по нему.\nНажмите кнопку \"Install\" (Установить). Терминал в Visual Studio для работы с Python Откройте терминал в Visual Studio (View -> Terminal), или используйте внешний терминал, и перейдите в корневую директорию вашего проекта. Тут так же можно создать виртуальную среду Python с помощью инструмента venv. Выполните следующую команду в терминале: Copy Code python -m venv .env Тут так же можно установите зависимости из requirements.txt в вашу виртуальную среду. Выполните следующую команду: Copy Code pip install -r requirements.txt Для работы с вашим проектом потребуется активировать виртуальную среду в команндной строек Windows или во внешнем терменале(который вы уже запускали выше) выполните скрипт activate.bat : Copy Code .\\.env\\Scripts\\activate Пример работы с вашим приложением на Python из виртуальной среды .env Copy Code Microsoft Windows [Version 10.0.19045.3086]\n(c) Microsoft Corporation. All rights reserved.\n\nC:\\WINDOWS\\system32>cd C:\\projects\\python\\microweb\\\n\nC:\\projects\\python\\microweb>.\\.env\\Scripts\\activate\n\n(.env) C:\\projects\\python\\microweb>\n\n(.env) C:\\projects\\python\\microweb>python microweb.py\nC:\\projects\\python\\microweb\nDONE!\nElapsed time:  1.16 seconds\n\n(.env) C:\\projects\\python\\microweb> Теперь вы можете работать с вашим проектом, используя активированную виртуальную среду Python в Visual Studio. Зависимости из requirements.txt будут доступны в вашем проекте. Обратите внимание, что эти инструкции предполагают, что у вас уже установлен Python на вашей машине. Если Python не установлен, убедитесь, что вы установили его и добавили путь к исполняемому файлу Python.exe в переменную среды PATH . Теперь у вас должна быть настроена виртуальная среда Python с использованием .env и requirements.txt в Visual Studio. Вы можете продолжать разрабатывать ваш проект с учетом этих настроек. Установить как точку входа Python-файл в Visual Studio 2022 Чтобы выбрать Python-файл, который будет запускаться по умолчанию в Visual Studio 2022, выполните следующие шаги: Откройте ваш проект в Visual Studio 2022. В обозревателе решений Solution Explorer найдите Python-файл, который вы хотите установить как файл, запускающийся по умолчанию. Щелкните правой кнопкой мыши на этом Python-файле и выберите \"Установить как точку входа\" (Set as Startup File) из контекстного меню. Теперь в Solution Explorer этот файл будет выделен жирным шрифтом показывающим что является файлом, запускающимся по умолчанию. Теперь, когда вы запускаете ваш проект, Visual Studio будет использовать выбранный Python-файл как точку входа. Если вы хотите изменить файл, запускающийся по умолчанию, на другой Python-файл, просто щелкните правой кнопкой мыши на новом файле и выберите \"Установить как точку входа\" (Set as Startup File) . Таким образом, Visual Studio будет использовать новый Python-файл как точку входа при запуске проекта. ← Предыдущая статья: Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Windows Server 2019 → Следующая статья: Установка OpenSSH на Ubuntu 22.04 Copyright d00m4ace © 2024", "url": "/posts\\nastrojka-visual-studio-2022-dlja-raboty-s-python\\"}, {"title": "Основы Git, которые используется для работы с ветками", "body": "Основы Git, которые используется для работы с ветками Блог Проекты Тэги Заметки Search Основы Git, которые используется для работы с ветками #4 пятница, 30 июня 2023 г. 3 минут(ы) 199 слов #Git #Windows Команда git branch -M main используется для переименования текущей ветки в main. Copy Code git branch -M main В этой команде, branch это команда Git, которая используется для работы с ветками. Опция -M означает \"переименовать\", и main — это новое имя для ветки. Эта команда полезна, например, при переходе с использования термина master для главной ветки на использование термина main, что стало общепринятой практикой в сообществе разработчиков для избегания негативной коннотации слова \"master\". Важно отметить, что эту команду следует выполнять, находясь в ветке, которую вы хотите переименовать. Команда git branch используется в системе контроля версий Git для перечисления, создания или удаления ветвей. Если вы запустите git branch без дополнительных параметров, она просто выведет список всех ветвей в вашем текущем репозитории. Текущая ветка (то есть ветка, на которой вы сейчас находитесь) будет отмечена звездочкой и выделена. Пример использования: Copy Code git branch Результат может выглядеть так: Copy Code develop\n* main\n  feature/new-feature В этом примере у нас есть три ветки: develop , main и feature/new-feature . Текущая ветка — main , как указано звездочкой и выделением. Вы также можете использовать git branch с дополнительными параметрами для создания новых веток: Copy Code git branch new-branch-name или удаления существующих: Copy Code git branch -d branch-name-to-delete ← Предыдущая статья: Git на Windows основы его использования → Следующая статья: Клонирования репозитория Git Copyright d00m4ace © 2024", "url": "/posts\\osnovy-git-kotorye-ispolzuetsja-dlja-raboty-s-vetkami\\"}, {"title": "Открытие портов и перенаправление их на определенный компьютер в вашей домашней сети", "body": "Открытие портов и перенаправление их на определенный компьютер в вашей домашней сети Блог Проекты Тэги Заметки Search Открытие портов и перенаправление их на определенный компьютер в вашей домашней сети #12 воскресенье, 2 июля 2023 г. 6 минут(ы) 515 слов #Windows #NAT #Port Forwarding Открытие портов и перенаправление их на определенный компьютер в вашей домашней сети, обычно называемое \"пробросом портов\", это процесс, который обычно выполняется через веб-интерфейс вашего маршрутизатора. Важно отметить, что процедура может немного отличаться в зависимости от бренда и модели вашего маршрутизатора. Ниже приведены общие шаги: Найти адрес маршрутизатора. Обычно это что-то вроде 192.168.0.1 или 192.168.1.1 . Вы должны быть в состоянии найти его, посмотрев настройки сети вашего компьютера или консультации с документацией маршрутизатора. Войти в интерфейс маршрутизатора. Откройте веб-браузер и введите IP-адрес маршрутизатора в адресную строку. Это должно открыть веб-интерфейс маршрутизатора, где вам потребуется ввести имя пользователя и пароль. Если вы не знаете эти детали, проверьте документацию маршрутизатора или веб-сайт производителя. Найти настройки перенаправления портов. Обычно это находится в разделе, который может называться \" Advanced \", \" NAT \", \" Virtual Server \" или \" Port Forwarding \". Снова, если вы не уверены, где находятся эти настройки, проверьте документацию маршрутизатора. Настройка перенаправления портов. Введите номер порта или диапазон портов, протокол ( TCP или UDP , или оба), и IP-адрес компьютера в вашей сети, на который вы хотите перенаправить порты. Возможно, вам потребуется включить эти правила или применить изменения. Сохраните и примените изменения. После того, как вы внесете все необходимые изменения, убедитесь, что вы нажали на кнопку для сохранения или применения изменений. Помните, открытие портов увеличивает уровень доступа к вашей сети из Интернета, что может увеличить риск безопасности. Открывайте только те порты, которые действительно нужны, и всегда используйте сильные пароли и обновленное программное обеспечение для защиты вашей сети. Пример проброса портов http 80 и https 443 с маршрутизатора \"Ростелекома\" на второй маршрутизатор KEENETIC ULTRA, а затем на домашний сервер Windows Server 2019 Copy Code internet -> -> 192.168.0.1 ( маршрутизатор \"Ростелекома\" ) -> -> 192.168.0.2 ( маршрутизатор KEENETIC ULTRA ) -> -> 192.168.2.41 ( Windows Server 2019 ) Обратите внимание маршрутизатор KEENETIC ULTRA находится в сети маршрутизатора \"Ростелекома\" по адресу 192.168.0.2 Настройка маршрутизатора \"Ростелекома\" https://192.168.0.1/ Home > Configure > NAT > Port Mapping Все входящие запросы из internet на маршрутизатор \"Ростелеком\" на порты http 80 и https 443 перенаправляются на те же порты маршрутизатора KEENETIC ULTRA Для этого создайте новое правило Define Costume Service , в котором укажите, что вы получаете и куда вы это отправляете: В результате мы видим рабочее правило в списке всех правил маршрутизатора \"Ростелеком\", мы можем проверить, что оно задоно правильно, а затем сохранить и применить все изменения: Настройка маршрутизатора \"KEENETIC ULTRA\" https://192.168.2.1/ Выбераем раздел Сетевые правила > Переадресация Все входящие запросы с маршрутизатора KEENETIC ULTRA на порты http 80 и https 443 перенаправляются на те же порты на домашнем сервере Windows Server 2019 Для этого создайте новое правило, в котором укажите, что вы получаете и куда вы это отправляете: В результате мы видим рабочее правило в списке всех правил маршрутизатора \"KEENETIC ULTRA\": Статический IP-адрес был также приобретен у провайдера для легкого доступа из Интернета к локальному серверу Windows Server 2019. ← Предыдущая статья: Git и Windows symbolic links (символические ссылки), также известные как symlinks → Следующая статья: Установка Nginx на Windows 10, Windows 11, Windows Server 2019 Copyright d00m4ace © 2024", "url": "/posts\\otkrytie-portov-i-perenapravlenie-ih-na-opredelennyj-kompjuter-v-vashej-domashnej-seti\\"}, {"title": "Удаление директории из Git", "body": "Удаление директории из Git Блог Проекты Тэги Заметки Search Удаление директории из Git #10 суббота, 1 июля 2023 г. 5 минут(ы) 382 слова #Git #Windows #.gitignore Для удаления директории из Git, вы можете использовать команду git rm , затем зафиксировать эти изменения и отправить их в удалённый репозиторий. Вот последовательность действий: Удалите директорию и файлы внутри неё: Copy Code git rm -r name_of_the_directory Здесь -r означает рекурсивное удаление, то есть удаление директории и всего содержимого внутри неё. Если вы получите ошибку error: the following files have local modifications: указывает на то, что есть некоторые файлы в вашем репозитории Git, которые были изменены, но эти изменения не были зафиксированы (commit). Copy Code error : the following files have local modifications : microweb /env/Lib/site-packages/Markdown-3.4.3.dist-info/ RECORD ... microweb /env/Lib/site-packages/soupsieve-2.4.1.dist-info/ RECORD ( use -- cached to keep the file , or - f to force removal ) Используйте тогда команду git rm -r -f name_of_the_directory удаляет директорию name_of_the_directory и все её содержимое из вашего Git репозитория. Copy Code git rm -r -f name_of_the_directory rm это команда Git для удаления файлов или директорий из вашего репозитория. Флаг -r указывает Git удалить содержимое директории рекурсивно, включая саму директорию и все поддиректории. Флаг -f или --force говорит Git принудительно удалить файлы, даже если они имеют изменения, которые не были зафиксированы. Обратите внимание, что это удалит только файлы из Git репозитория. Если вы хотите удалить директорию и из вашей файловой системы, вы должны использовать команду rm вашей операционной системы. Также, не забудьте зафиксировать эти изменения с помощью git commit , и затем отправить их в удаленный репозиторий с помощью git push , если это необходимо. Зафиксируйте изменения: Copy Code git commit -m \"Removed the directory\" Отправьте изменения в удалённый репозиторий: Copy Code git push origin name_of_the_branch Обратите внимание, что это действие необратимо и удалит директорию из истории Git. Если вы хотите сохранить директорию в истории Git, но не отслеживать дальнейшие изменения, вы можете добавить эту директорию в файл .gitignore . Если вы попытались удалить файлы или переключить ветки, Git не позволит вам это сделать, чтобы предотвратить потерю незафиксированных изменений. Если вы хотите сохранить свои изменения, вы должны добавить измененные файлы в staging area с помощью git add , а затем зафиксировать их с помощью git commit : Copy Code git add modified_file\ngit commit -m \"Commit message\" Если же вы не хотите сохранять свои изменения, вы можете откатить их с помощью git checkout : Copy Code git checkout -- modified_file Или если вы хотите откатить все изменения: Copy Code git checkout -- . Это откатит все незафиксированные изменения в вашем репозитории к последнему commit'у. ← Предыдущая статья: Git игнорирование определенных файлов и директорий → Следующая статья: Git и Windows symbolic links (символические ссылки), также известные как symlinks Copyright d00m4ace © 2024", "url": "/posts\\udalenie-direktorii-iz-git\\"}, {"title": "Установка Certbot для Nginx на Ubuntu для работы с HTTPS", "body": "Установка Certbot для Nginx на Ubuntu для работы с HTTPS Блог Проекты Тэги Заметки Search Установка Certbot для Nginx на Ubuntu для работы с HTTPS #22 понедельник, 17 июля 2023 г. 5 минут(ы) 413 слов #Nginx #Certbot #SSL #TLS #HTTPS #Ubuntu Обновите пакетный менеджер: Copy Code sudo apt-get update Установите Certbot и плагин Nginx: Copy Code sudo apt-get install certbot python3-certbot-nginx Получите SSL-сертификат и настройте Nginx, заменив yourdomain.com на ваш домен: Copy Code sudo certbot --nginx -d yourdomain.com Пример для домена и поддоменов: Copy Code sudo certbot -- nginx - d pixelrobot . ru - d api . pixelrobot . ru - d test . pixelrobot . ru - d www . pixelrobot . ru Saving debug log to / var / log / letsencrypt / letsencrypt . log Enter email address ( used for urgent renewal and security notices ) ( Enter 'c' to cancel ): d00m4ace79 @ gmail . com - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Please read the Terms of Service at https : // letsencrypt . org / documents / LE - SA - v1 . 3 - September - 21 - 2022. pdf . You must agree in order to register with the ACME server . Do you agree ? - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ( Y ) es / ( N ) o : y - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - Would you be willing , once your first certificate is successfully issued , to share your email address with the Electronic Frontier Foundation , a founding partner of the Let 's Encrypt project and the non-profit organization that develops Certbot ? We 'd like to send you email about our work encrypting the web, EFF news , campaigns , and ways to support digital freedom . - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - ( Y ) es / ( N ) o : n Account registered . Requesting a certificate for pixelrobot . ru and 3 more domains Successfully received certificate . Certificate is saved at : / etc / letsencrypt / live / pixelrobot . ru / fullchain . pem Key is saved at : / etc / letsencrypt / live / pixelrobot . ru / privkey . pem This certificate expires on 2023 - 10 - 15. These files will be updated when the certificate renews . Certbot has set up a scheduled task to automatically renew this certificate in the background . Deploying certificate Successfully deployed certificate for pixelrobot . ru to / etc / nginx / sites - enabled / default Successfully deployed certificate for api . pixelrobot . ru to / etc / nginx / sites - enabled / default Successfully deployed certificate for test . pixelrobot . ru to / etc / nginx / sites - enabled / default Successfully deployed certificate for www . pixelrobot . ru to / etc / nginx / sites - enabled / default Congratulations ! You have successfully enabled HTTPS on https : // pixelrobot . ru , https : // api . pixelrobot . ru , https : // test . pixelrobot . ru , and https : // www . pixelrobot . ru ← Предыдущая статья: Установка Nginx на Ubuntu → Следующая статья: Установка Python на Ubuntu Copyright d00m4ace © 2024", "url": "/posts\\ustanovka-certbot-dlja-nginx-na-ubuntu-dlja-raboty-s-https\\"}, {"title": "Установка Git на Windows", "body": "Установка Git на Windows Блог Проекты Тэги Заметки Search Установка Git на Windows #2 понедельник, 5 июня 2023 г. 5 минут(ы) 418 слов #Git #Windows Процесс установки Git для Windows прост и понятен. Вот пошаговое руководство, как установить 64-битную версию Git на Windows: Перейдите на официальный сайт Git по адресу https://git-scm.com/download/win . Найдите ссылку на исполняемый файл, который будет назван примерно так: \"Git-2.xx.x-64-bit.exe\", где xx.x - это номер версии. И начните его загруку. Чтобы начать процесс установки после загрузки, запустите загруженный исполняемый файл (обычно он находится в папке Downloads), который будет называться примерно так: \"Git-2.xx.x-64-bit.exe\". Дважды щелкните на нем, чтобы запустить процесс установки. В установщике нажмите на \"Next\" (Далее). Выберите каталог для установки и нажмите на \"Next\" (Далее). Обычно подходит значение (обычно C:\\Git). Выберите компоненты для установки и нажмите на \"Next\" (Далее). Если у вас нет специальной причины, то подойдут опции по умолчанию. Оставьте выбранной опцию \"Use the Notepad++ editor by default\" (Использовать редактор Notepad++ по умолчанию) и нажмите \"Next\" (Далее). На следующем экране выберите \"Use Git from the Windows Command Prompt\" (Использовать Git из командной строки Windows) и нажмите \"Next\" (Далее). Это позволит вам использовать команды Git из командной строки Windows. На экране \"Choosing the SSH executable\" оставьте выбранной опцию \"Use bundled OpenSSH\" (Использовать ssh.exe идующий вместе с Git) и нажмите \"Next\" (Далее). На экране \"Choosing HTTPS transport backend\" (Выбор бэкенда для HTTPS-транспорта) оставьте выбранной опцию \"Use the OpenSSL library\" (Использовать библиотеку OpenSSL) и нажмите \"Next\" (Далее). На следующем экране оставьте выбранной опцию \"Checkout Windows-style, commit Unix-style line endings\" (Проверка в стиле Windows, коммит в стиле Unix) и нажмите \"Next\" (Далее). На экране \"Configuring the terminal emulator to use with Git Bash\" (Настройка эмулятора терминала для использования с Git Bash) овыберите \"Use Windows' default console window\" и нажмите \"Next\" (Далее). Git будет использовать окно консоли по умолчанию Windows (\"cmd.exe\", которое хорошо работает с консольными программами win32, такими как интерактивный Python или node.js, но имеет очень ограниченную прокрутку по умолчанию, нуждается в настройке на использование шрифта Unicode, чтобы корректно отображать символы, не являющиеся символами ASCII. На следующем экране оставьте все опции по умолчанию выбранными и нажмите \"Next\" (Далее). На следующем экране включите опцию \"Enable symbolic links\" , эта опцию позволит правильно работать с символическими ссылками (симлинк, символьная ссылка, Symbolic link)  и нажмите \"Next\" (Далее). Нажмите на \"Install\" (Установить), чтобы начать установку. После завершения установки нажмите на \"Finish\" Чтобы проверить установку, вы можете открыть командную строку (нажмите Win + R , введите cmd и нажмите Enter), затем введите Copy Code git --version Вы должны увидеть отображенную установленную версию Git: Copy Code git version 2.41.0.windows.1 Это подтверждает, что Git был успешно установлен. ← Предыдущая статья: Как запустить командную строку (cmd) от имени администратора в Windows 7, 10, 11 → Следующая статья: Git на Windows основы его использования Copyright d00m4ace © 2024", "url": "/posts\\ustanovka-git-na-windows\\"}, {"title": "Установка Nginx на Ubuntu", "body": "Установка Nginx на Ubuntu Блог Проекты Тэги Заметки Search Установка Nginx на Ubuntu #21 понедельник, 17 июля 2023 г. 2 минут(ы) 90 слов #Nginx #Ubuntu Обновите список пакетов: Copy Code sudo apt update Установите Nginx: Copy Code sudo apt install nginx Запустите Nginx: Copy Code sudo systemctl start nginx Убедитесь, что Nginx запускается при загрузке: Copy Code sudo systemctl enable nginx Добавьте правила для Nginx в ufw: Copy Code sudo ufw allow 'Nginx Full' Эта команда позволит входящие соединения на портах 80 и 443, которые используются Nginx для HTTP и HTTPS соответственно.\nПроверить статус ufw: Copy Code sudo ufw status Чтобы открыть файл конфигурации Nginx в редакторе Sublime Text на Ubuntu: Copy Code subl /etc/nginx/nginx.conf ← Предыдущая статья: Настройка Remote Desktop Connection (RDC) для подключения к Ubuntu с другой машины → Следующая статья: Установка Certbot для Nginx на Ubuntu для работы с HTTPS Copyright d00m4ace © 2024", "url": "/posts\\ustanovka-nginx-na-ubuntu\\"}, {"title": "Установка Nginx на Windows 10, Windows 11, Windows Server 2019", "body": "Установка Nginx на Windows 10, Windows 11, Windows Server 2019 Блог Проекты Тэги Заметки Search Установка Nginx на Windows 10, Windows 11, Windows Server 2019 #13 понедельник, 3 июля 2023 г. 9 минут(ы) 756 слов #Nginx #Windows #Windows service Установка Nginx на Windows Перейдите на официальный сайт Nginx https://nginx.org/ и перейдите на страницу загрузки https://nginx.org/en/download.html . Загрузите последнюю стабильную версию Nginx для Windows в формате zip. Распакуйте загруженный архив Nginx в каталог на вашем компьютере, например, C:\\nginx . Откройте файл nginx.conf , который находится в папке conf в распакованном каталоге Nginx. Внесите необходимые изменения в конфигурацию, например, настройте прослушиваемый порт и корневую директорию вашего веб-сервера. Откройте командную строку (Command Prompt) от имени администратора и перейдите в каталог, где расположен Nginx (например, C:\\nginx ). Запустите Nginx, введя следующую команду: Copy Code nginx.exe Откройте веб-браузер и введите http://localhost/ в адресной строке. Если Nginx работает должным образом, вы должны увидеть страницу приветствия Nginx. Для остановки Nginx можно использовать команду nginx.exe -s stop или закрыть командную строку, в которой был запущен сервер. Copy Code nginx.exe -s stop Брандмауэр Windows Если при первом запуске Nginx на Windows появляется запрос на разрешение доступа по сети, это может быть вызвано настройками брандмауэра Windows. Брандмауэр может обнаружить новое приложение и запросить разрешение на доступ к сети. Для разрешения доступа Nginx к сети, следуйте этим шагам: При появлении запроса на разрешение доступа по сети, нажмите на кнопку \"Разрешить доступ\" или \"Разрешить доступ для общественных сетей\" (в зависимости от предлагаемых вариантов). Если запрос на разрешение доступа появляется только для частной сети, но не для общественной, вы можете разрешить доступ только для частной сети. В этом случае, выберите опцию \"Разрешить доступ\" или \"Разрешить доступ для частных сетей\". Если запрос на разрешение доступа не появляется автоматически, вы можете открыть настройки брандмауэра Windows вручную. Для этого, откройте Панель управления, найдите \"Брандмауэр Windows\" и откройте его. Затем выберите \"Разрешение приложений через брандмауэр Windows\" или \"Разрешить приложение через брандмауэр Windows\". В списке найдите Nginx и убедитесь, что для него установлено разрешение для доступа по сети. После разрешения доступа Nginx к сети, брандмауэр Windows больше не будет запрашивать разрешение при каждом запуске сервера. Если проблема продолжает возникать или запрос на разрешение доступа не появляется, убедитесь, что у вас есть достаточные права администратора для изменения настроек брандмауэра и выполнения операций сети на вашей Windows-машине. Настройка Nginx под Windows в качестве службы Вы можете создать службу Windows для Nginx вручную, используя встроенную команду sc. Вот как вы можете сделать это: Скачайте и установите Nginx (если вы еще этого не сделали). Откройте командную строку с правами администратора. Выполните следующую команду, заменив путь до nginx.exe на ваш: Copy Code sc create nginx binPath= \"C:\\path\\to\\nginx.exe\" Обратите внимание на пробел после binPath=, он обязателен. Теперь у вас есть служба Windows для Nginx. Вы можете запустить ее, используя следующую команду: Copy Code net start nginx После того как служба создана, вы можете запустить ее также с помощью команды sc start [service name], а остановить - с помощью команды sc stop [service name]. Copy Code sc start nginx\nsc stop nginx Однако, нужно помнить, что Nginx, запущенный таким образом, не будет иметь всех функций, таких как автоматический перезапуск после сбоев и другие.\nСледует также отметить, что команда sc create создает службу с настройками по умолчанию. В частности, служба будет работать под учетной записью LocalSystem и не будет автоматически запускаться при старте системы. Вы можете изменить эти и другие настройки с помощью дополнительных опций команды sc create или через Менеджер служб Windows. Также стоит отметить, что по умолчанию служба будет работать под учетной записью LocalSystem, что может не соответствовать вашим требованиям к безопасности. Вы можете изменить учетную запись, под которой работает служба, в свойствах службы в Менеджере служб Windows. Если вы хотите получить больше контроля над службой, рекомендуется использовать инструментом для создания служб Windows. Ниже приведены некоторые альтернативы: WinSW : WinSW - это инструмент, написанный на C#, который также позволяет запускать приложения как службы Windows. Он обеспечивает поддержку XML для конфигурации служб и поддерживает различные функции управления службами, такие как перезапуск, зависимости служб и т.д. SRVANY : Это утилита из набора инструментов Windows Resource Kit от Microsoft, которая позволяет любому Windows приложению работать как служба. Однако утилита довольно старая и не поддерживается на новых версиях Windows. FireDaemon : Это коммерческий продукт, который позволяет создавать и управлять службами Windows для любого приложения. FireDaemon предлагает множество функций, включая планирование, мониторинг, автоматический перезапуск после сбоев и многое другое. AlwaysUp : Еще одна коммерческая утилита, которая может превращать любое приложение в службу Windows. Она обеспечивает набор функций, включая автоматический перезапуск приложения после сбоев, поддержку электронной почты и даже \"приглушение\" приложений, которые нежелательно запускать в фоновом режиме. Итак, в зависимости от ваших требований и бюджета, вы можете выбрать любой из этих инструментов для запуска Nginx как службы Windows. ← Предыдущая статья: Открытие портов и перенаправление их на определенный компьютер в вашей домашней сети → Следующая статья: Настройка Nginx для обработки HTTP, HTTPS соединений в Windows Copyright d00m4ace © 2024", "url": "/posts\\ustanovka-nginx-na-windows-10-windows-11-windows-server-2019\\"}, {"title": "Установка OpenSSH на Ubuntu 22.04", "body": "Установка OpenSSH на Ubuntu 22.04 Блог Проекты Тэги Заметки Search Установка OpenSSH на Ubuntu 22.04 #19 воскресенье, 16 июля 2023 г. 2 минут(ы) 136 слов #OpenSSH #Ubuntu Откройте терминал и введите: Copy Code sudo apt update\nsudo apt install openssh-server Проверьте статус службы SSH: Copy Code sudo systemctl status ssh Если он запущен, вы должны увидеть active (running) в выводе. Разрешите соединения SSH через Firewall, UFW (Uncomplicated Firewall): Copy Code sudo ufw allow ssh После этого мы можем активировать брандмауэр UFW с помощью следующей команды: Copy Code sudo ufw enable Чтобы увидеть, что подключения SSH разрешены, введите следующее: Copy Code sudo ufw status Используя например Windows Terminal на другом компьютере, введите Copy Code ssh username @your_server_ip Замените \"username\" на ваше имя пользователя Ubuntu и \"your_server_ip\" на IP-адрес вашего сервера Ubuntu.\nЕсли это ваше первое соединение, вам будет предложено принять отпечаток ключа хоста. \nВведите 'yes', далее ведите пароль для пользователя Ubuntu.\nОбратите внимание, что для безопасности рекомендуется настроить аутентификацию по ключам SSH вместо использования паролей. ← Предыдущая статья: Настройка Visual Studio 2022 для работы с Python → Следующая статья: Настройка Remote Desktop Connection (RDC) для подключения к Ubuntu с другой машины Copyright d00m4ace © 2024", "url": "/posts\\ustanovka-openssh-na-ubuntu-22dot04\\"}, {"title": "Установка Python на Ubuntu", "body": "Установка Python на Ubuntu Блог Проекты Тэги Заметки Search Установка Python на Ubuntu #23 вторник, 18 июля 2023 г. 4 минут(ы) 337 слов #Python #Ubuntu Проверить все версии Python установленные в системе: Copy Code ls /usr/bin/python* | grep python Обновите список доступных пакетов и их версий в репозиториях Ubuntu. Откройте терминал и введите следующую команду: Copy Code sudo apt-get update Проверьте текущую установленную версию Python 3. В терминале введите следующую команду: Copy Code python3 --version Установите Python 3.11 через пакетный менеджер apt-get . В терминале введите следующую команду: Copy Code sudo apt-get install python3.11 Проверьте, что Python 3.11 был установлен корректно. В терминале введите следующую команду: Copy Code python3.11 --version Установите модуль venv для Python 3, который используется для создания виртуальных окружений Python. В терминале введите следующую команду: Copy Code sudo apt-get install python3-venv Если вы хотите использовать модуль venv с Python 3.11, установите его с помощью команды: Copy Code sudo apt-get install python3.11-venv Создайте новое виртуальное окружение для Python 3.11 с именем env311 в текущем каталоге: Copy Code python3.11 -m venv env311 Активируйте виртуальное окружение env311 . В терминале введите следующую команду: Copy Code source env311/bin/activate Если вы хотите деактивировать виртуальное окружение Python, вы можете использовать команду deactivate. Copy Code deactivate Эта команда отключает виртуальное окружение, и вы вернетесь к использованию системного Python и системного pip. Заметьте, что команда deactivate работает только в активном виртуальном окружении. Если окружение не активировано, эта команда не будет работать. Установите модули Python, перечисленные в файле requirements.txt, с помощью pip, программы установки пакетов Python: Пример файла requirements.txt: Copy Code beautifulsoup4 == 4.12 . 2 bs4 == 0.0 . 1 Markdown == 3.4 . 3 pip == 23.1 . 2 Pygments == 2.15 . 1 PyYAML == 6.0 setuptools == 65.5 . 0 six == 1.16 . 0 soupsieve == 2.4 . 1 transliterate == 1.10 . 2 Установка пакетов Python перечисленных в файле requirements.txt Copy Code pip install -r requirements.txt Вам также может потребоваться установить компилятор gcc и другие необходимые пакеты: Copy Code sudo apt-get install build-essential\nsudo apt-get install libpq-dev И, возможно, исходный код Python3: Copy Code sudo apt-get install python3-dev\nsudo apt-get install python3.11-dev Код для проверки версии Python на момент выполнения программы: Copy Code #ver.py import sys print ( \"Python version\" ) print ( sys . version ) print ( \"Version info.\" ) print ( sys . version_info ) Проверим, какая версия Python будет на момент выполнения программы: Copy Code python3 pyver.py\n\nPython version\n3.11.0rc1 (main, Aug 12 2022, 10:02:14) [GCC 11.2.0]\nVersion info.\nsys.version_info(major=3, minor=11, micro=0, releaselevel='candidate', serial=1) ← Предыдущая статья: Установка Certbot для Nginx на Ubuntu для работы с HTTPS → Следующая статья: Настроить Nginx в качестве HTTPS-прокси для вашего REST приложения Python на Flask и Waitress на Ubuntu Copyright d00m4ace © 2024", "url": "/posts\\ustanovka-python-na-ubuntu\\"}, {"title": "D00M4ACE блог ИИ и геймдев - Проекты", "body": "D00M4ACE блог ИИ и геймдев - Проекты Блог Проекты Тэги Заметки Search Yet another 2d mmorpg in C Еще одна 2d mmorpg на чистом C. На текущей стадии проект представляет собой обширную и готовую к использованию кодовую базу на чистом языке C для разработки 2D MMORPG, совместимую с операционными системами Windows, Linux и Android. Включает в себя развитый 2D-движок для отображения спрайтов, в том числе персонажей, и базовый пользовательский интерфейс. Серверная часть, также выполненная на чистом C, обеспечивает многозадачную обработку TCP/IP-соединений для большого количества клиентов и интегрирована с базой данных PostgreSQL. Кроме того, весь инструмент для работы с ресурсами написан на C,\nи входит в состав проекта. А именно: генератор спрайтовых атласов, генератор структур с функциями для обмена сообщениями между сервером и клиентом. GitHub: https://github.com/d00m4ace/2dmmorpg MicroWeb Еще один генератор статических сайтов/блогов на основе Markdown в Python с автоматическим созданием карты сайта. Примером сайта, созданного с помощью MicroWeb, является d00m4ace.com . Этот проект представляет собой генератор статистических сайтов и блогов, написанный на чистом Python и основанный на Markdown. Созданный как альтернатива готовым движкам, таким как HUGO, он предлагает простую, но эффективную кодовую базу для энтузиастов и разработчиков, которые хотят получить больше гибкости и контроля над процессом создания своих сайтов и блогов. Проект идеально подходит для тех, кто хочет изучить принципы работы статических сайтов или создать уникальный сайт с минимальными техническими требованиями и без необходимости полагаться на сложные и обширные фреймворки. GitHub: github.com/d00m4ace/microweb HEXPLAY Этот проект — это 2D движок для настольных игр на C/C++, созданный специально для операционной системы Windows. Он предлагает уникальный и гибкий подход к созданию и ведению настольных игр в цифровом формате. Основные функции: Визуальное представление: Отображение ключевых элементов игры, таких как игровое поле, фишки, карточки и прочее. Многопользовательский режим: Поддержка многопользовательской игры, включая варианты \"play by email\" и “hotseat”. Кастомизация: Простая и понятная система создания пользовательских настольных игр с использованием .json файлов, исключающая необходимость программирования. Интерактивный интерфейс: Удобный пользовательский интерфейс с возможностью перетаскивания элементов и автоматической реакцией на действия пользователя. Хранение настроек и данных игр: Использование .json формата для хранения всех настроек и данных игры, упрощающее управление и сохранение игровых процессов. Особенность проекта: Ключевая особенность этого движка — предоставление пользователям возможности вести игровые сессии на своих личных компьютерах без необходимости подключения к серверу или онлайн сервисам. Это дает игрокам полную свободу в организации игр и обмене ходами с помощью разнообразных средств связи, включая электронную почту и мессенджеры. Движок идеально подходит для разработчиков, которые хотят создать удобные и интерактивные настольные игры, легко адаптируемые под индивидуальные предпочтения и стили игры. Web: https://hexplay.com Crossy Snow: Avalanche! C# соло-разработанная Unity3D игра, аркада в ретро-стиле с кубической графикой, полный исходный код и ресурсы включены. Сборка доступна с Unity3D - Unity 2022.3.15f1 LTS и совместима с Visual Studio 2022. Описание игры: Crossy Snow: Лавина! Запрыгивайте на лыжи и мчитесь прочь - за вами гонится огромная лавина снега... и пикселей! Десятки знаменитых персонажей со всей галактики собрались встать на лыжи и испытать друг друга на прочность, как вдруг с вершины ретро-горы сошла сверхскоростная лавина! Прокладывайте путь по снежному склону в этой классической аркадной игре, избегайте деревьев и препятствий, уворачивайтесь и сбивайте других лыжников. Установите новый рекорд и сыграйте за других персонажей в этом экстремальном лыжном приключении, пришедшем на ваш телефон из классической эпохи восьмидесятых. Особенности игры: управление одним пальцем - быстро, просто и весело! нестареющая классика десятки популярных персонажей достижения и рейтинги для сравнения с друзьями GitHub: https://github.com/d00m4ace/avalanche Copyright d00m4ace © 2024", "url": "/projects\\"}, {"title": "D00M4ACE блог ИИ и геймдев - Заметки", "body": "D00M4ACE блог ИИ и геймдев - Заметки Блог Проекты Тэги Заметки Search Заметки Git Для начала определим пользователья глобально и перенос новых строк отключим авто замену CRLF обратно на LF.\nИ также core.symlinks true позволяет Git создавать и обрабатывать символические ссылки. Для работы с символическими ссылками необходимо запускать Git из командной строки Windows (CMD) с правами администратора. Copy Code git config -- global core . autocrlf false git config -- global core . symlinks true git config -- global user . name \"username\" git config --global user.email \"username@mail.com\" Для создания нового репозитория и отправки всего его содержимого в новый уже созданый репозиторий на github: Copy Code git init\ngit config --local core.symlinks true\ngit add .\ngit status\n\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/d00m4ace/hex.play.git\ngit push -u origin main Если вы хотите скопировать существующий репозиторий, используйте команду git clone : Copy Code git clone --config core.symlinks=true https://github.com/d00m4ace/HEXPLAY.git Проверьте обновления с сервера Copy Code git pull\ngit status\ngit merge Добавьте свои изменения Copy Code git add .\ngit commit -m \"Your descriptive commit message here\"\ngit push Чтобы отменить последний git add , вы можете использовать команду git reset Эта команда снимет индексацию с изменений, но сохранит сами изменения в файлах. Copy Code git reset Nginx Запуск Nginx Copy Code start nginx Остановка Nginx Copy Code nginx -s stop Эта команда останавливает Nginx немедленно. Это может привести к потере данных, которые еще не были записаны на диск. Безопасная остановка Nginx Copy Code nginx -s quit Перезапуск Nginx Copy Code nginx - s reload Эта команда перезапускает Nginx, что полезно при изменении конфигурационных файлов. Проверка конфигурации Nginx Copy Code nginx -t Создать новую службу в Windows Команда sc create для создания новых служб в Windows : Copy Code sc create [ service name ] binPath = \"[path to the .exe]\" sc create nginx binPath = \"C: \\n ginx \\n ginx.exe\" Следует также отметить, что команда sc create создает службу с настройками по умолчанию. В частности, служба будет работать под учетной записью LocalSystem и не будет автоматически запускаться при старте системы. Вы можете изменить эти и другие настройки с помощью дополнительных опций команды sc create или через Менеджер служб Windows. После того как служба создана, вы можете запустить ее с помощью команды sc start [service name] , а остановить - с помощью команды sc stop [service name] . Copy Code sc start nginx\nsc stop nginx Так же команды net start и net stop используются в командной строке Windows для управления службами Windows. Copy Code net start nginx\nnet stop nginx Если вы часто перезапускаете службу, может быть удобно создать скрипт для этого. Например, вы можете создать файл !.bat со следующим содержимым: Copy Code @echo off net stop nginx net start nginx Curl Отправляет POST-запрос с JSON-телом. Здесь -H \"Content-Type: application/json\" указывает, что тело запроса будет в формате JSON. -d \"{\\\"name\\\":\\\"John\\\", \\\"age\\\":30}\" это данные, которые вы отправляете в теле запроса. Copy Code C:\\curl\\curl -X POST -H \"Content-Type: application/json\" -d \"{\\\"name\\\":\\\"John\\\", \\\"age\\\":30}\" https://test.hexplay.com/post Отправляет POST-запрос с данными в формате x-www-form-urlencoded. Здесь -H \"Content-Type: application/x-www-form-urlencoded\" указывает, что тело запроса будет в формате x-www-form-urlencoded, а -d \"name=John&age=30\" это данные, которые вы отправляете. Copy Code C:\\curl\\curl -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d \"name=John&age=30\" https://test.hexplay.com/post Отправляет POST-запрос с текстовыми данными. Здесь -H \"Content-Type: text/plain\" указывает, что тело запроса будет текстовым, а -d \"Hello, World!\" это данные, которые вы отправляете. Copy Code C:\\curl\\curl -X POST -H \"Content-Type: text/plain\" -d \"Hello, World!\" https://test.hexplay.com/post Отправит GET-запрос на указанный URL с параметрами name=John и age=30, и вы увидите ответ в командной строке. Copy Code C:\\curl\\curl \"https://test.hexplay.com/get?name=John&age=30\" -O (заглавная \"O\", а не ноль) говорит curl сохранить файл с оригинальным именем файла из URL. Copy Code curl -O https://example.com/path/to/file Эта команда загрузит файл, как и прежде, но сохранит его под именем newfile. Copy Code curl -o newfile https://example.com/path/to/file Опция -z позволяет указать время и дату файла. Если файл на сервере новее указанного времени, curl загрузит его. Copy Code curl -z localfile -O https://example.com/path/to/file В этом случае curl сначала проверяет время последнего изменения локального файла (localfile). Если файл на сервере новее, curl загрузит его и перезапишет локальный файл. mklink Помните, что для выполнения команды mklink вам нужны административные права в Windows. Copy Code mklink /d code ..\\..\\code Создает символическую ссылку с именем \" code \" на каталог \" ..\\..\\code \" относительно текущего местоположения в файловой системе.\nИспользуется флаг /d , который указывает, что вы создаете символическую ссылку на каталог, а не на файл. 7z Скрипт Windows Batch создает архив 7z директории HEXPLAY \\ с помощью 7-Zip и именуют его в зависимости от текущей даты и времени, исключая директории .vs, x64, Debug, Release, output, и .git . !BACKUP.bat Copy Code set target=\"%DATE:~-4%.%DATE:~4,2%.%DATE:~7,2%-%TIME:~0,2%.%TIME:~3,2%.%TIME:~-5%-HEXPLAY-BACKUP-mx5\".7z\n\"C:\\Program Files\\7-Zip\\7z.exe\" a -t7z %target% HEXPLAY\\ -mx5 -xr!.vs -xr!x64 -xr!Debug -xr!Release -xr!output -xr!.git\ncopy %target% \"G:\\My Drive\\BACKUP\"\ncopy %target% \"E:\\BACKUP\\\" Первая команда: устанавливает переменную target с именем файла, включающим текущую дату и время, а также суффикс -HEXPLAY-BACKUP-mx5 и расширением .7z . Использование %DATE% и %TIME% с подстроками создает дату и время в нужном формате. Вторая команда: использует 7-Zip для создания архива 7z . Опция a добавляет файлы в архив, -t7z указывает тип архива (7z), %target% является именем создаваемого архива, HEXPLAY \\ это директория, которую нужно архивировать, -mx5 задает уровень сжатия, а -xr! используется для исключения определенных директорий или файлов из процесса архивации. Третья и четвертая команды: копирует файл в директорию BACKUP на диске G, и копирует файл в директорию BACKUP на диске E. Убедитесь, что путь к 7z.exe верный и что директория HEXPLAY \\ существует. Если они не существуют или неправильно указаны, вы получите ошибку. PostgreSQL pg_env.bat скрипт настраивает среду для PostgreSQL. Copy Code C:\\PostgreSQL\\15\\pg_env.bat Cоздаем резервную копию базы данных PostgreSQL с именем \"mydb\". Copy Code pg_dump -U postgres -W -F t mydb > dbbackup.tar \"pg_dump\": Это утилита, предоставляемая PostgreSQL для создания резервных копий баз данных. \"-U postgres\": Это указывает, что вы хотите использовать пользователя PostgreSQL с именем \"postgres\" для создания резервной копии. \"-W\": Это заставит команду запросить пароль для пользователя. \"-F t\": Это указывает, что резервная копия должна быть создана в формате tar. \"mydb\": Это имя базы данных, которую вы хотите сохранить. \"> dbbackup.tar\": Это перенаправляет вывод команды pg_dump (то есть резервную копию) в файл с именем \"dbbackup.tar\". Если файл с этим именем уже существует, он будет перезаписан. Команда восстанавливает базу данных PostgreSQL с именем \"mydb\" из резервной копии, находящейся в файле \"dbbackup.tar\". Copy Code pg_restore -U postgres -W -d mydb -1 dbbackup.tar \"pg_restore\": Это утилита, предоставляемая PostgreSQL для восстановления баз данных из резервных копий. \"-U postgres\": Это указывает, что вы хотите использовать пользователя PostgreSQL с именем \"postgres\" для восстановления. \"-W\": Это заставит команду запросить пароль для пользователя. \"-d mydb\": Это имя базы данных, которую вы хотите восстановить. Обратите внимание, что эта база данных должна уже существовать перед восстановлением. Если она не существует, вы можете создать ее с помощью утилиты createdb. \"-1\": Эта опция указывает, что восстановление должно быть выполнено в одной транзакции. Таким образом, если во время восстановления произойдет какая-либо ошибка, все изменения, сделанные во время восстановления, будут откачены, оставив базу данных в ее исходном состоянии. \"dbbackup.tar\": Это имя файла резервной копии, которую вы хотите восстановить. Мои домены d00m4ace.com d00m4ace.com - https://d00m4ace.com Редиректы 301 на d00m4ace.com: doom4ace.com - https://doom4ace.com d00m4ace.ru - http://d00m4ace.ru doom4ace.ru - http://doom4ace.ru doomface.ru - http://doomface.ru hexplay.com hexplay.com - https://hexplay.com Copyright d00m4ace © 2024", "url": "/shortcuts\\"}]